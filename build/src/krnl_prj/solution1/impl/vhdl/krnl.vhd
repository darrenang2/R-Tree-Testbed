-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    number_of_operations : IN STD_LOGIC_VECTOR (31 downto 0);
    board_num : IN STD_LOGIC_VECTOR (31 downto 0);
    exe : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of krnl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_krnl,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=178545,HLS_SYN_LUT=395948,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (79 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (79 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (79 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (79 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (79 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (79 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (79 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (79 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (79 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (79 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv208_lc_8 : STD_LOGIC_VECTOR (207 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv194_lc_9 : STD_LOGIC_VECTOR (193 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal HBM_PTR : STD_LOGIC_VECTOR (63 downto 0);
    signal operations : STD_LOGIC_VECTOR (63 downto 0);
    signal parameters_for_operations : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal parameters_for_operations_read_reg_814 : STD_LOGIC_VECTOR (63 downto 0);
    signal operations_read_reg_824 : STD_LOGIC_VECTOR (63 downto 0);
    signal HBM_PTR_read_reg_829 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln42_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_reg_889 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln43_fu_486_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln43_reg_894 : STD_LOGIC_VECTOR (5 downto 0);
    signal debugCounter_3_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal debugCounter_3_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln42_2_reg_910 : STD_LOGIC_VECTOR (57 downto 0);
    signal and_ln40_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln43_2_reg_915 : STD_LOGIC_VECTOR (57 downto 0);
    signal gmem_addr_read_reg_932 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_addr_33_read_reg_937 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln45_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln668_fu_678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln668_reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal insertFin_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_reg_961 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_insert_fu_385_ap_start : STD_LOGIC;
    signal grp_insert_fu_385_ap_done : STD_LOGIC;
    signal grp_insert_fu_385_ap_idle : STD_LOGIC;
    signal grp_insert_fu_385_ap_ready : STD_LOGIC;
    signal grp_insert_fu_385_newLeaf2insert_read : STD_LOGIC;
    signal grp_insert_fu_385_insertNode4insert_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_insert_fu_385_insertNode4insert_write : STD_LOGIC;
    signal grp_insert_fu_385_getNode4insert2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_insert_fu_385_getNode4insert2_write : STD_LOGIC;
    signal grp_insert_fu_385_receiveNode4insert_read : STD_LOGIC;
    signal grp_insert_fu_385_writeChanges4insert_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_insert_fu_385_writeChanges4insert_write : STD_LOGIC;
    signal grp_insert_fu_385_overflow2split_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_insert_fu_385_overflow2split_write : STD_LOGIC;
    signal grp_insert_fu_385_cst_req_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_insert_fu_385_cst_req_write : STD_LOGIC;
    signal grp_insert_fu_385_split2overflow_read : STD_LOGIC;
    signal grp_insert_fu_385_insertFinished3_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_insert_fu_385_insertFinished3_write : STD_LOGIC;
    signal grp_memory_manager_fu_454_ap_start : STD_LOGIC;
    signal grp_memory_manager_fu_454_ap_done : STD_LOGIC;
    signal grp_memory_manager_fu_454_ap_idle : STD_LOGIC;
    signal grp_memory_manager_fu_454_ap_ready : STD_LOGIC;
    signal grp_memory_manager_fu_454_insertNode4insert_read : STD_LOGIC;
    signal grp_memory_manager_fu_454_getNode4insert2_read : STD_LOGIC;
    signal grp_memory_manager_fu_454_receiveNode4insert_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_memory_manager_fu_454_receiveNode4insert_write : STD_LOGIC;
    signal grp_memory_manager_fu_454_writeChanges4insert_read : STD_LOGIC;
    signal grp_memory_manager_fu_454_overflow2split_read : STD_LOGIC;
    signal grp_memory_manager_fu_454_cst_req_read : STD_LOGIC;
    signal grp_memory_manager_fu_454_split2overflow_din : STD_LOGIC_VECTOR (416 downto 0);
    signal grp_memory_manager_fu_454_split2overflow_write : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_memory_manager_fu_454_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_memory_manager_fu_454_m_axi_gmem_BREADY : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_phi_mux_insertFin_3_phi_fu_376_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal insertFinished_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal insertFinished_empty_n : STD_LOGIC;
    signal insertFinished_read : STD_LOGIC;
    signal tmp_54_nbreadreq_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state80 : BOOLEAN;
    signal insertFin_1_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal newLeaf2insert_din : STD_LOGIC_VECTOR (416 downto 0);
    signal newLeaf2insert_full_n : STD_LOGIC;
    signal newLeaf2insert_write : STD_LOGIC;
    signal ap_block_state76 : BOOLEAN;
    signal grp_insert_fu_385_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal newLeaf2insert_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal newLeaf2insert_empty_n : STD_LOGIC;
    signal newLeaf2insert_read : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal insertNode4insert_full_n : STD_LOGIC;
    signal insertNode4insert_write : STD_LOGIC;
    signal getNode4insert_full_n : STD_LOGIC;
    signal getNode4insert_write : STD_LOGIC;
    signal receiveNode4insert_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal receiveNode4insert_empty_n : STD_LOGIC;
    signal receiveNode4insert_read : STD_LOGIC;
    signal writeChanges4insert_full_n : STD_LOGIC;
    signal writeChanges4insert_write : STD_LOGIC;
    signal overflow2split_full_n : STD_LOGIC;
    signal overflow2split_write : STD_LOGIC;
    signal cst_req_full_n : STD_LOGIC;
    signal cst_req_write : STD_LOGIC;
    signal split2overflow_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal split2overflow_empty_n : STD_LOGIC;
    signal split2overflow_read : STD_LOGIC;
    signal insertFinished_full_n : STD_LOGIC;
    signal insertFinished_write : STD_LOGIC;
    signal grp_memory_manager_fu_454_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal insertNode4insert_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal insertNode4insert_empty_n : STD_LOGIC;
    signal insertNode4insert_read : STD_LOGIC;
    signal getNode4insert_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal getNode4insert_empty_n : STD_LOGIC;
    signal getNode4insert_read : STD_LOGIC;
    signal receiveNode4insert_full_n : STD_LOGIC;
    signal receiveNode4insert_write : STD_LOGIC;
    signal writeChanges4insert_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal writeChanges4insert_empty_n : STD_LOGIC;
    signal writeChanges4insert_read : STD_LOGIC;
    signal overflow2split_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal overflow2split_empty_n : STD_LOGIC;
    signal overflow2split_read : STD_LOGIC;
    signal cst_req_dout : STD_LOGIC_VECTOR (416 downto 0);
    signal cst_req_empty_n : STD_LOGIC;
    signal cst_req_read : STD_LOGIC;
    signal split2overflow_full_n : STD_LOGIC;
    signal split2overflow_write : STD_LOGIC;
    signal ap_block_state80_ignore_call2 : BOOLEAN;
    signal sext_ln42_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal debugCounter_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_2_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_528_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln42_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln9_fu_555_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln43_1_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln42_3_fu_602_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln42_1_fu_605_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_1_fu_613_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln42_1_fu_618_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_fu_626_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln42_fu_630_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal curr_V_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_3_fu_645_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_1_fu_648_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_1_fu_656_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln43_1_fu_661_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_fu_669_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln43_fu_673_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln10_fu_712_p9 : STD_LOGIC_VECTOR (207 downto 0);
    signal or_ln62_fu_728_p2 : STD_LOGIC_VECTOR (207 downto 0);
    signal tmp_52_fu_734_p4 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_53_fu_744_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_fu_754_p5 : STD_LOGIC_VECTOR (193 downto 0);
    signal or_ln62_1_fu_766_p2 : STD_LOGIC_VECTOR (193 downto 0);
    signal sext_ln62_fu_772_p1 : STD_LOGIC_VECTOR (384 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_insert IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        newLeaf2insert_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        newLeaf2insert_empty_n : IN STD_LOGIC;
        newLeaf2insert_read : OUT STD_LOGIC;
        insertNode4insert_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        insertNode4insert_full_n : IN STD_LOGIC;
        insertNode4insert_write : OUT STD_LOGIC;
        getNode4insert2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        getNode4insert2_full_n : IN STD_LOGIC;
        getNode4insert2_write : OUT STD_LOGIC;
        receiveNode4insert_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        receiveNode4insert_empty_n : IN STD_LOGIC;
        receiveNode4insert_read : OUT STD_LOGIC;
        writeChanges4insert_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        writeChanges4insert_full_n : IN STD_LOGIC;
        writeChanges4insert_write : OUT STD_LOGIC;
        overflow2split_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        overflow2split_full_n : IN STD_LOGIC;
        overflow2split_write : OUT STD_LOGIC;
        cst_req_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        cst_req_full_n : IN STD_LOGIC;
        cst_req_write : OUT STD_LOGIC;
        split2overflow_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        split2overflow_empty_n : IN STD_LOGIC;
        split2overflow_read : OUT STD_LOGIC;
        insertFinished3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        insertFinished3_full_n : IN STD_LOGIC;
        insertFinished3_write : OUT STD_LOGIC );
    end component;


    component krnl_memory_manager IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        insertNode4insert_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        insertNode4insert_empty_n : IN STD_LOGIC;
        insertNode4insert_read : OUT STD_LOGIC;
        getNode4insert2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        getNode4insert2_empty_n : IN STD_LOGIC;
        getNode4insert2_read : OUT STD_LOGIC;
        receiveNode4insert_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        receiveNode4insert_full_n : IN STD_LOGIC;
        receiveNode4insert_write : OUT STD_LOGIC;
        writeChanges4insert_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        writeChanges4insert_empty_n : IN STD_LOGIC;
        writeChanges4insert_read : OUT STD_LOGIC;
        overflow2split_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        overflow2split_empty_n : IN STD_LOGIC;
        overflow2split_read : OUT STD_LOGIC;
        cst_req_dout : IN STD_LOGIC_VECTOR (416 downto 0);
        cst_req_empty_n : IN STD_LOGIC;
        cst_req_read : OUT STD_LOGIC;
        split2overflow_din : OUT STD_LOGIC_VECTOR (416 downto 0);
        split2overflow_full_n : IN STD_LOGIC;
        split2overflow_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        HBM_PTR : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component krnl_fifo_w417_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (416 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (416 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        HBM_PTR : OUT STD_LOGIC_VECTOR (63 downto 0);
        operations : OUT STD_LOGIC_VECTOR (63 downto 0);
        parameters_for_operations : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component krnl_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_insert_fu_385 : component krnl_insert
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_insert_fu_385_ap_start,
        ap_done => grp_insert_fu_385_ap_done,
        ap_idle => grp_insert_fu_385_ap_idle,
        ap_ready => grp_insert_fu_385_ap_ready,
        newLeaf2insert_dout => newLeaf2insert_dout,
        newLeaf2insert_empty_n => newLeaf2insert_empty_n,
        newLeaf2insert_read => grp_insert_fu_385_newLeaf2insert_read,
        insertNode4insert_din => grp_insert_fu_385_insertNode4insert_din,
        insertNode4insert_full_n => insertNode4insert_full_n,
        insertNode4insert_write => grp_insert_fu_385_insertNode4insert_write,
        getNode4insert2_din => grp_insert_fu_385_getNode4insert2_din,
        getNode4insert2_full_n => getNode4insert_full_n,
        getNode4insert2_write => grp_insert_fu_385_getNode4insert2_write,
        receiveNode4insert_dout => receiveNode4insert_dout,
        receiveNode4insert_empty_n => receiveNode4insert_empty_n,
        receiveNode4insert_read => grp_insert_fu_385_receiveNode4insert_read,
        writeChanges4insert_din => grp_insert_fu_385_writeChanges4insert_din,
        writeChanges4insert_full_n => writeChanges4insert_full_n,
        writeChanges4insert_write => grp_insert_fu_385_writeChanges4insert_write,
        overflow2split_din => grp_insert_fu_385_overflow2split_din,
        overflow2split_full_n => overflow2split_full_n,
        overflow2split_write => grp_insert_fu_385_overflow2split_write,
        cst_req_din => grp_insert_fu_385_cst_req_din,
        cst_req_full_n => cst_req_full_n,
        cst_req_write => grp_insert_fu_385_cst_req_write,
        split2overflow_dout => split2overflow_dout,
        split2overflow_empty_n => split2overflow_empty_n,
        split2overflow_read => grp_insert_fu_385_split2overflow_read,
        insertFinished3_din => grp_insert_fu_385_insertFinished3_din,
        insertFinished3_full_n => insertFinished_full_n,
        insertFinished3_write => grp_insert_fu_385_insertFinished3_write);

    grp_memory_manager_fu_454 : component krnl_memory_manager
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_memory_manager_fu_454_ap_start,
        ap_done => grp_memory_manager_fu_454_ap_done,
        ap_idle => grp_memory_manager_fu_454_ap_idle,
        ap_ready => grp_memory_manager_fu_454_ap_ready,
        insertNode4insert_dout => insertNode4insert_dout,
        insertNode4insert_empty_n => insertNode4insert_empty_n,
        insertNode4insert_read => grp_memory_manager_fu_454_insertNode4insert_read,
        getNode4insert2_dout => getNode4insert_dout,
        getNode4insert2_empty_n => getNode4insert_empty_n,
        getNode4insert2_read => grp_memory_manager_fu_454_getNode4insert2_read,
        receiveNode4insert_din => grp_memory_manager_fu_454_receiveNode4insert_din,
        receiveNode4insert_full_n => receiveNode4insert_full_n,
        receiveNode4insert_write => grp_memory_manager_fu_454_receiveNode4insert_write,
        writeChanges4insert_dout => writeChanges4insert_dout,
        writeChanges4insert_empty_n => writeChanges4insert_empty_n,
        writeChanges4insert_read => grp_memory_manager_fu_454_writeChanges4insert_read,
        overflow2split_dout => overflow2split_dout,
        overflow2split_empty_n => overflow2split_empty_n,
        overflow2split_read => grp_memory_manager_fu_454_overflow2split_read,
        cst_req_dout => cst_req_dout,
        cst_req_empty_n => cst_req_empty_n,
        cst_req_read => grp_memory_manager_fu_454_cst_req_read,
        split2overflow_din => grp_memory_manager_fu_454_split2overflow_din,
        split2overflow_full_n => split2overflow_full_n,
        split2overflow_write => grp_memory_manager_fu_454_split2overflow_write,
        m_axi_gmem_AWVALID => grp_memory_manager_fu_454_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_memory_manager_fu_454_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_memory_manager_fu_454_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_memory_manager_fu_454_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_memory_manager_fu_454_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_memory_manager_fu_454_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_memory_manager_fu_454_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_memory_manager_fu_454_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_memory_manager_fu_454_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_memory_manager_fu_454_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_memory_manager_fu_454_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_memory_manager_fu_454_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_memory_manager_fu_454_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_memory_manager_fu_454_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_memory_manager_fu_454_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_memory_manager_fu_454_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_memory_manager_fu_454_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_memory_manager_fu_454_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_memory_manager_fu_454_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_memory_manager_fu_454_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_memory_manager_fu_454_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_memory_manager_fu_454_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_memory_manager_fu_454_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_memory_manager_fu_454_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_memory_manager_fu_454_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_memory_manager_fu_454_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_memory_manager_fu_454_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_memory_manager_fu_454_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_memory_manager_fu_454_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_memory_manager_fu_454_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_memory_manager_fu_454_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_memory_manager_fu_454_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        HBM_PTR => HBM_PTR_read_reg_829);

    control_s_axi_U : component krnl_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        HBM_PTR => HBM_PTR,
        operations => operations,
        parameters_for_operations => parameters_for_operations);

    gmem_m_axi_U : component krnl_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_memory_manager_fu_454_m_axi_gmem_AWADDR,
        I_AWLEN => grp_memory_manager_fu_454_m_axi_gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_memory_manager_fu_454_m_axi_gmem_WDATA,
        I_WSTRB => grp_memory_manager_fu_454_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    newLeaf2insert_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => newLeaf2insert_din,
        if_full_n => newLeaf2insert_full_n,
        if_write => newLeaf2insert_write,
        if_dout => newLeaf2insert_dout,
        if_empty_n => newLeaf2insert_empty_n,
        if_read => newLeaf2insert_read);

    insertNode4insert_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_insertNode4insert_din,
        if_full_n => insertNode4insert_full_n,
        if_write => insertNode4insert_write,
        if_dout => insertNode4insert_dout,
        if_empty_n => insertNode4insert_empty_n,
        if_read => insertNode4insert_read);

    getNode4insert_fifo_U : component krnl_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_getNode4insert2_din,
        if_full_n => getNode4insert_full_n,
        if_write => getNode4insert_write,
        if_dout => getNode4insert_dout,
        if_empty_n => getNode4insert_empty_n,
        if_read => getNode4insert_read);

    receiveNode4insert_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_memory_manager_fu_454_receiveNode4insert_din,
        if_full_n => receiveNode4insert_full_n,
        if_write => receiveNode4insert_write,
        if_dout => receiveNode4insert_dout,
        if_empty_n => receiveNode4insert_empty_n,
        if_read => receiveNode4insert_read);

    writeChanges4insert_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_writeChanges4insert_din,
        if_full_n => writeChanges4insert_full_n,
        if_write => writeChanges4insert_write,
        if_dout => writeChanges4insert_dout,
        if_empty_n => writeChanges4insert_empty_n,
        if_read => writeChanges4insert_read);

    overflow2split_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_overflow2split_din,
        if_full_n => overflow2split_full_n,
        if_write => overflow2split_write,
        if_dout => overflow2split_dout,
        if_empty_n => overflow2split_empty_n,
        if_read => overflow2split_read);

    cst_req_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_cst_req_din,
        if_full_n => cst_req_full_n,
        if_write => cst_req_write,
        if_dout => cst_req_dout,
        if_empty_n => cst_req_empty_n,
        if_read => cst_req_read);

    split2overflow_fifo_U : component krnl_fifo_w417_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_memory_manager_fu_454_split2overflow_din,
        if_full_n => split2overflow_full_n,
        if_write => split2overflow_write,
        if_dout => split2overflow_dout,
        if_empty_n => split2overflow_empty_n,
        if_read => split2overflow_read);

    insertFinished_fifo_U : component krnl_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_insert_fu_385_insertFinished3_din,
        if_full_n => insertFinished_full_n,
        if_write => insertFinished_write,
        if_dout => insertFinished_dout,
        if_empty_n => insertFinished_empty_n,
        if_read => insertFinished_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_insert_fu_385_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_insert_fu_385_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    grp_insert_fu_385_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_insert_fu_385_ap_ready = ap_const_logic_1)) then 
                    grp_insert_fu_385_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_memory_manager_fu_454_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_memory_manager_fu_454_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                    grp_memory_manager_fu_454_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_memory_manager_fu_454_ap_ready = ap_const_logic_1)) then 
                    grp_memory_manager_fu_454_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    debugCounter_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                debugCounter_fu_232 <= ap_const_lv32_0;
            elsif ((not(((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                debugCounter_fu_232 <= debugCounter_3_reg_905;
            end if; 
        end if;
    end process;

    insertFin_1_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_942 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                insertFin_1_reg_360 <= insertFin_reg_348;
            elsif ((not(((newLeaf2insert_full_n = ap_const_logic_0) and (insertFin_reg_348 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                insertFin_1_reg_360 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    insertFin_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                insertFin_reg_348 <= ap_phi_mux_insertFin_3_phi_fu_376_p4;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                insertFin_reg_348 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    operation_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                operation_fu_236 <= ap_const_lv32_0;
            elsif ((not(((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) and (tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                operation_fu_236 <= operation_2_fu_781_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                HBM_PTR_read_reg_829 <= HBM_PTR;
                operations_read_reg_824 <= operations;
                parameters_for_operations_read_reg_814 <= parameters_for_operations;
                trunc_ln42_reg_889 <= trunc_ln42_fu_482_p1;
                trunc_ln43_reg_894 <= trunc_ln43_fu_486_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                debugCounter_3_reg_905 <= debugCounter_3_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                gmem_addr_33_read_reg_937 <= gmem_RDATA;
                icmp_ln45_reg_942 <= icmp_ln45_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                gmem_addr_read_reg_932 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((insertFin_reg_348 = ap_const_lv1_1) and (icmp_ln45_reg_942 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                tmp_50_reg_956 <= lshr_ln43_fu_673_p2(47 downto 32);
                tmp_51_reg_961 <= lshr_ln43_fu_673_p2(63 downto 48);
                tmp_s_reg_951 <= lshr_ln43_fu_673_p2(31 downto 16);
                trunc_ln668_reg_946 <= trunc_ln668_fu_678_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln40_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln42_2_reg_910 <= add_ln42_fu_540_p2(63 downto 6);
                trunc_ln43_2_reg_915 <= add_ln43_fu_567_p2(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state73, ap_CS_fsm_state4, ap_CS_fsm_state74, ap_CS_fsm_state2, and_ln40_fu_516_p2, icmp_ln45_reg_942, ap_CS_fsm_state75, insertFin_reg_348, grp_insert_fu_385_ap_done, grp_memory_manager_fu_454_ap_done, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state80, insertFinished_empty_n, tmp_54_nbreadreq_fu_336_p3, ap_CS_fsm_state76, newLeaf2insert_full_n, ap_CS_fsm_state78)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_0 = and_ln40_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((icmp_ln45_reg_942 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state76 => 
                if ((not(((newLeaf2insert_full_n = ap_const_logic_0) and (insertFin_reg_348 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((grp_insert_fu_385_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if ((not(((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln42_1_fu_613_p2 <= std_logic_vector(unsigned(trunc_ln42_1_fu_605_p3) + unsigned(trunc_ln42_reg_889));
    add_ln42_fu_540_p2 <= std_logic_vector(signed(sext_ln42_fu_536_p1) + signed(operations_read_reg_824));
    add_ln43_1_fu_656_p2 <= std_logic_vector(unsigned(trunc_ln43_1_fu_648_p3) + unsigned(trunc_ln43_reg_894));
    add_ln43_fu_567_p2 <= std_logic_vector(signed(sext_ln43_1_fu_563_p1) + signed(parameters_for_operations_read_reg_814));
    and_ln40_fu_516_p2 <= (icmp_ln40_fu_506_p2 and icmp_ln40_1_fu_511_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state74_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(insertFin_reg_348, newLeaf2insert_full_n)
    begin
        if (((newLeaf2insert_full_n = ap_const_logic_0) and (insertFin_reg_348 = ap_const_lv1_1))) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;

    ap_ST_fsm_state78_blk_assign_proc : process(grp_insert_fu_385_ap_done)
    begin
        if ((grp_insert_fu_385_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(grp_memory_manager_fu_454_ap_done, insertFinished_empty_n, tmp_54_nbreadreq_fu_336_p3)
    begin
        if (((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state76_assign_proc : process(insertFin_reg_348, newLeaf2insert_full_n)
    begin
                ap_block_state76 <= ((newLeaf2insert_full_n = ap_const_logic_0) and (insertFin_reg_348 = ap_const_lv1_1));
    end process;


    ap_block_state80_assign_proc : process(insertFinished_empty_n, tmp_54_nbreadreq_fu_336_p3)
    begin
                ap_block_state80 <= ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0));
    end process;


    ap_block_state80_ignore_call2_assign_proc : process(insertFinished_empty_n, tmp_54_nbreadreq_fu_336_p3)
    begin
                ap_block_state80_ignore_call2 <= ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, and_ln40_fu_516_p2)
    begin
        if (((ap_const_lv1_0 = and_ln40_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_insertFin_3_phi_fu_376_p4_assign_proc : process(ap_CS_fsm_state80, insertFinished_dout, tmp_54_nbreadreq_fu_336_p3, insertFin_1_reg_360)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
            if ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_insertFin_3_phi_fu_376_p4 <= insertFin_1_reg_360;
            elsif ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_insertFin_3_phi_fu_376_p4 <= insertFinished_dout;
            else 
                ap_phi_mux_insertFin_3_phi_fu_376_p4 <= "X";
            end if;
        else 
            ap_phi_mux_insertFin_3_phi_fu_376_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, and_ln40_fu_516_p2)
    begin
        if (((ap_const_lv1_0 = and_ln40_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cst_req_read_assign_proc : process(grp_memory_manager_fu_454_cst_req_read, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cst_req_read <= grp_memory_manager_fu_454_cst_req_read;
        else 
            cst_req_read <= ap_const_logic_0;
        end if; 
    end process;


    cst_req_write_assign_proc : process(grp_insert_fu_385_cst_req_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cst_req_write <= grp_insert_fu_385_cst_req_write;
        else 
            cst_req_write <= ap_const_logic_0;
        end if; 
    end process;

    curr_V_fu_635_p1 <= lshr_ln42_fu_630_p2(32 - 1 downto 0);
    debugCounter_3_fu_522_p2 <= std_logic_vector(unsigned(debugCounter_fu_232) + unsigned(ap_const_lv32_1));

    getNode4insert_read_assign_proc : process(grp_memory_manager_fu_454_getNode4insert2_read, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            getNode4insert_read <= grp_memory_manager_fu_454_getNode4insert2_read;
        else 
            getNode4insert_read <= ap_const_logic_0;
        end if; 
    end process;


    getNode4insert_write_assign_proc : process(grp_insert_fu_385_getNode4insert2_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            getNode4insert_write <= grp_insert_fu_385_getNode4insert2_write;
        else 
            getNode4insert_write <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_memory_manager_fu_454_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state80, ap_CS_fsm_state79, sext_ln42_1_fu_582_p1, sext_ln43_fu_592_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARADDR <= sext_ln43_fu_592_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARADDR <= sext_ln42_1_fu_582_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_ARADDR <= grp_memory_manager_fu_454_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_memory_manager_fu_454_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_ARLEN <= grp_memory_manager_fu_454_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_memory_manager_fu_454_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_ARVALID <= grp_memory_manager_fu_454_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(grp_memory_manager_fu_454_m_axi_gmem_AWVALID, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_AWVALID <= grp_memory_manager_fu_454_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(grp_memory_manager_fu_454_m_axi_gmem_BREADY, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_BREADY <= grp_memory_manager_fu_454_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state74, grp_memory_manager_fu_454_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_RREADY <= grp_memory_manager_fu_454_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_memory_manager_fu_454_m_axi_gmem_WVALID, ap_CS_fsm_state80, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_WVALID <= grp_memory_manager_fu_454_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_insert_fu_385_ap_start <= grp_insert_fu_385_ap_start_reg;
    grp_memory_manager_fu_454_ap_start <= grp_memory_manager_fu_454_ap_start_reg;
    icmp_ln40_1_fu_511_p2 <= "1" when (signed(debugCounter_fu_232) < signed(exe)) else "0";
    icmp_ln40_fu_506_p2 <= "1" when (signed(operation_fu_236) < signed(number_of_operations)) else "0";
    icmp_ln45_fu_639_p2 <= "1" when (curr_V_fu_635_p1 = ap_const_lv32_1) else "0";

    insertFinished_read_assign_proc : process(grp_memory_manager_fu_454_ap_done, ap_CS_fsm_state80, insertFinished_empty_n, tmp_54_nbreadreq_fu_336_p3)
    begin
        if ((not(((grp_memory_manager_fu_454_ap_done = ap_const_logic_0) or ((tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (insertFinished_empty_n = ap_const_logic_0)))) and (tmp_54_nbreadreq_fu_336_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            insertFinished_read <= ap_const_logic_1;
        else 
            insertFinished_read <= ap_const_logic_0;
        end if; 
    end process;


    insertFinished_write_assign_proc : process(grp_insert_fu_385_insertFinished3_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            insertFinished_write <= grp_insert_fu_385_insertFinished3_write;
        else 
            insertFinished_write <= ap_const_logic_0;
        end if; 
    end process;


    insertNode4insert_read_assign_proc : process(grp_memory_manager_fu_454_insertNode4insert_read, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            insertNode4insert_read <= grp_memory_manager_fu_454_insertNode4insert_read;
        else 
            insertNode4insert_read <= ap_const_logic_0;
        end if; 
    end process;


    insertNode4insert_write_assign_proc : process(grp_insert_fu_385_insertNode4insert_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            insertNode4insert_write <= grp_insert_fu_385_insertNode4insert_write;
        else 
            insertNode4insert_write <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln42_fu_630_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_932),to_integer(unsigned('0' & zext_ln42_fu_626_p1(31-1 downto 0)))));
    lshr_ln43_fu_673_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_33_read_reg_937),to_integer(unsigned('0' & zext_ln43_fu_669_p1(31-1 downto 0)))));
    newLeaf2insert_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln62_fu_772_p1),417));

    newLeaf2insert_read_assign_proc : process(grp_insert_fu_385_newLeaf2insert_read, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            newLeaf2insert_read <= grp_insert_fu_385_newLeaf2insert_read;
        else 
            newLeaf2insert_read <= ap_const_logic_0;
        end if; 
    end process;


    newLeaf2insert_write_assign_proc : process(insertFin_reg_348, ap_CS_fsm_state76, newLeaf2insert_full_n)
    begin
        if ((not(((newLeaf2insert_full_n = ap_const_logic_0) and (insertFin_reg_348 = ap_const_lv1_1))) and (insertFin_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            newLeaf2insert_write <= ap_const_logic_1;
        else 
            newLeaf2insert_write <= ap_const_logic_0;
        end if; 
    end process;

    operation_2_fu_781_p2 <= std_logic_vector(unsigned(operation_fu_236) + unsigned(ap_const_lv32_1));
    or_ln62_1_fu_766_p2 <= (tmp3_fu_754_p5 or ap_const_lv194_lc_9);
    or_ln62_fu_728_p2 <= (shl_ln10_fu_712_p9 or ap_const_lv208_lc_8);

    overflow2split_read_assign_proc : process(grp_memory_manager_fu_454_overflow2split_read, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            overflow2split_read <= grp_memory_manager_fu_454_overflow2split_read;
        else 
            overflow2split_read <= ap_const_logic_0;
        end if; 
    end process;


    overflow2split_write_assign_proc : process(grp_insert_fu_385_overflow2split_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            overflow2split_write <= grp_insert_fu_385_overflow2split_write;
        else 
            overflow2split_write <= ap_const_logic_0;
        end if; 
    end process;


    receiveNode4insert_read_assign_proc : process(grp_insert_fu_385_receiveNode4insert_read, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            receiveNode4insert_read <= grp_insert_fu_385_receiveNode4insert_read;
        else 
            receiveNode4insert_read <= ap_const_logic_0;
        end if; 
    end process;


    receiveNode4insert_write_assign_proc : process(grp_memory_manager_fu_454_receiveNode4insert_write, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            receiveNode4insert_write <= grp_memory_manager_fu_454_receiveNode4insert_write;
        else 
            receiveNode4insert_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln42_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_2_reg_910),64));

        sext_ln42_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_528_p3),64));

        sext_ln43_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln9_fu_555_p3),64));

        sext_ln43_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_2_reg_915),64));

        sext_ln62_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln62_1_fu_766_p2),385));

    shl_ln10_fu_712_p9 <= (((((((tmp_51_reg_961 & ap_const_lv16_0) & tmp_50_reg_956) & ap_const_lv16_0) & tmp_s_reg_951) & ap_const_lv16_0) & trunc_ln668_reg_946) & ap_const_lv96_0);
    shl_ln42_1_fu_618_p3 <= (add_ln42_1_fu_613_p2 & ap_const_lv3_0);
    shl_ln43_1_fu_661_p3 <= (add_ln43_1_fu_656_p2 & ap_const_lv3_0);
    shl_ln9_fu_555_p3 <= (operation_fu_236 & ap_const_lv3_0);
    shl_ln_fu_528_p3 <= (operation_fu_236 & ap_const_lv2_0);

    split2overflow_read_assign_proc : process(grp_insert_fu_385_split2overflow_read, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            split2overflow_read <= grp_insert_fu_385_split2overflow_read;
        else 
            split2overflow_read <= ap_const_logic_0;
        end if; 
    end process;


    split2overflow_write_assign_proc : process(grp_memory_manager_fu_454_split2overflow_write, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            split2overflow_write <= grp_memory_manager_fu_454_split2overflow_write;
        else 
            split2overflow_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_754_p5 <= (((ap_const_lv17_10000 & tmp_52_fu_734_p4) & tmp_53_fu_744_p4) & ap_const_lv32_0);
    tmp_52_fu_734_p4 <= or_ln62_fu_728_p2(207 downto 96);
    tmp_53_fu_744_p4 <= or_ln62_fu_728_p2(64 downto 32);
    tmp_54_nbreadreq_fu_336_p3 <= (0=>(insertFinished_empty_n), others=>'-');
    trunc_ln42_1_fu_605_p3 <= (trunc_ln42_3_fu_602_p1 & ap_const_lv2_0);
    trunc_ln42_3_fu_602_p1 <= operation_fu_236(4 - 1 downto 0);
    trunc_ln42_fu_482_p1 <= operations(6 - 1 downto 0);
    trunc_ln43_1_fu_648_p3 <= (trunc_ln43_3_fu_645_p1 & ap_const_lv3_0);
    trunc_ln43_3_fu_645_p1 <= operation_fu_236(3 - 1 downto 0);
    trunc_ln43_fu_486_p1 <= parameters_for_operations(6 - 1 downto 0);
    trunc_ln668_fu_678_p1 <= lshr_ln43_fu_673_p2(16 - 1 downto 0);

    writeChanges4insert_read_assign_proc : process(grp_memory_manager_fu_454_writeChanges4insert_read, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            writeChanges4insert_read <= grp_memory_manager_fu_454_writeChanges4insert_read;
        else 
            writeChanges4insert_read <= ap_const_logic_0;
        end if; 
    end process;


    writeChanges4insert_write_assign_proc : process(grp_insert_fu_385_writeChanges4insert_write, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            writeChanges4insert_write <= grp_insert_fu_385_writeChanges4insert_write;
        else 
            writeChanges4insert_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_1_fu_618_p3),512));
    zext_ln43_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_1_fu_661_p3),512));
end behav;
