// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="krnl_krnl,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=178723,HLS_SYN_LUT=396140,HLS_VERSION=2022_2}" *)

module krnl (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] HBM_PTR;
wire   [63:0] operations;
wire   [63:0] parameters_for_operations;
wire   [31:0] number_of_operations;
wire   [31:0] board_num;
wire   [31:0] exe;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
reg   [31:0] exe_read_reg_815;
reg   [31:0] number_of_operations_read_reg_820;
reg   [63:0] parameters_for_operations_read_reg_825;
reg   [63:0] operations_read_reg_830;
reg   [63:0] HBM_PTR_read_reg_835;
wire   [5:0] trunc_ln45_fu_488_p1;
reg   [5:0] trunc_ln45_reg_895;
wire   [5:0] trunc_ln46_fu_492_p1;
reg   [5:0] trunc_ln46_reg_900;
wire   [31:0] debugCounter_3_fu_528_p2;
reg   [31:0] debugCounter_3_reg_911;
wire    ap_CS_fsm_state2;
reg   [57:0] trunc_ln45_2_reg_916;
wire   [0:0] and_ln43_fu_522_p2;
reg   [57:0] trunc_ln46_2_reg_921;
reg   [511:0] gmem_addr_read_reg_938;
reg   [511:0] gmem_addr_33_read_reg_943;
wire   [0:0] icmp_ln48_fu_645_p2;
reg   [0:0] icmp_ln48_reg_948;
wire   [15:0] trunc_ln668_fu_684_p1;
reg   [15:0] trunc_ln668_reg_952;
wire    ap_CS_fsm_state75;
reg   [0:0] insertFin_reg_354;
reg   [15:0] tmp_s_reg_957;
reg   [15:0] tmp_50_reg_962;
reg   [15:0] tmp_51_reg_967;
wire    grp_insert_fu_391_ap_start;
wire    grp_insert_fu_391_ap_done;
wire    grp_insert_fu_391_ap_idle;
wire    grp_insert_fu_391_ap_ready;
wire    grp_insert_fu_391_newLeaf2insert_read;
wire   [416:0] grp_insert_fu_391_insertNode4insert_din;
wire    grp_insert_fu_391_insertNode4insert_write;
wire   [31:0] grp_insert_fu_391_getNode4insert2_din;
wire    grp_insert_fu_391_getNode4insert2_write;
wire    grp_insert_fu_391_receiveNode4insert_read;
wire   [416:0] grp_insert_fu_391_writeChanges4insert_din;
wire    grp_insert_fu_391_writeChanges4insert_write;
wire   [416:0] grp_insert_fu_391_overflow2split_din;
wire    grp_insert_fu_391_overflow2split_write;
wire   [416:0] grp_insert_fu_391_cst_req_din;
wire    grp_insert_fu_391_cst_req_write;
wire    grp_insert_fu_391_split2overflow_read;
wire   [0:0] grp_insert_fu_391_insertFinished3_din;
wire    grp_insert_fu_391_insertFinished3_write;
wire    grp_memory_manager_fu_460_ap_start;
wire    grp_memory_manager_fu_460_ap_done;
wire    grp_memory_manager_fu_460_ap_idle;
wire    grp_memory_manager_fu_460_ap_ready;
wire    grp_memory_manager_fu_460_insertNode4insert_read;
wire    grp_memory_manager_fu_460_getNode4insert2_read;
wire   [416:0] grp_memory_manager_fu_460_receiveNode4insert_din;
wire    grp_memory_manager_fu_460_receiveNode4insert_write;
wire    grp_memory_manager_fu_460_writeChanges4insert_read;
wire    grp_memory_manager_fu_460_overflow2split_read;
wire    grp_memory_manager_fu_460_cst_req_read;
wire   [416:0] grp_memory_manager_fu_460_split2overflow_din;
wire    grp_memory_manager_fu_460_split2overflow_write;
wire    grp_memory_manager_fu_460_m_axi_gmem_AWVALID;
wire   [63:0] grp_memory_manager_fu_460_m_axi_gmem_AWADDR;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_AWID;
wire   [31:0] grp_memory_manager_fu_460_m_axi_gmem_AWLEN;
wire   [2:0] grp_memory_manager_fu_460_m_axi_gmem_AWSIZE;
wire   [1:0] grp_memory_manager_fu_460_m_axi_gmem_AWBURST;
wire   [1:0] grp_memory_manager_fu_460_m_axi_gmem_AWLOCK;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_AWCACHE;
wire   [2:0] grp_memory_manager_fu_460_m_axi_gmem_AWPROT;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_AWQOS;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_AWREGION;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_AWUSER;
wire    grp_memory_manager_fu_460_m_axi_gmem_WVALID;
wire   [511:0] grp_memory_manager_fu_460_m_axi_gmem_WDATA;
wire   [63:0] grp_memory_manager_fu_460_m_axi_gmem_WSTRB;
wire    grp_memory_manager_fu_460_m_axi_gmem_WLAST;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_WID;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_WUSER;
wire    grp_memory_manager_fu_460_m_axi_gmem_ARVALID;
wire   [63:0] grp_memory_manager_fu_460_m_axi_gmem_ARADDR;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_ARID;
wire   [31:0] grp_memory_manager_fu_460_m_axi_gmem_ARLEN;
wire   [2:0] grp_memory_manager_fu_460_m_axi_gmem_ARSIZE;
wire   [1:0] grp_memory_manager_fu_460_m_axi_gmem_ARBURST;
wire   [1:0] grp_memory_manager_fu_460_m_axi_gmem_ARLOCK;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_ARCACHE;
wire   [2:0] grp_memory_manager_fu_460_m_axi_gmem_ARPROT;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_ARQOS;
wire   [3:0] grp_memory_manager_fu_460_m_axi_gmem_ARREGION;
wire   [0:0] grp_memory_manager_fu_460_m_axi_gmem_ARUSER;
wire    grp_memory_manager_fu_460_m_axi_gmem_RREADY;
wire    grp_memory_manager_fu_460_m_axi_gmem_BREADY;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [0:0] ap_phi_mux_insertFin_3_phi_fu_382_p4;
wire    ap_CS_fsm_state80;
wire   [0:0] insertFinished_dout;
wire    insertFinished_empty_n;
reg    insertFinished_read;
wire   [0:0] tmp_54_nbreadreq_fu_342_p3;
reg    ap_block_state80;
reg   [0:0] insertFin_1_reg_366;
wire    ap_CS_fsm_state76;
wire   [416:0] newLeaf2insert_din;
wire    newLeaf2insert_full_n;
reg    newLeaf2insert_write;
reg    ap_block_state76;
reg    grp_insert_fu_391_ap_start_reg;
wire    ap_CS_fsm_state77;
wire   [416:0] newLeaf2insert_dout;
wire    newLeaf2insert_empty_n;
reg    newLeaf2insert_read;
wire    ap_CS_fsm_state78;
wire    insertNode4insert_full_n;
reg    insertNode4insert_write;
wire    getNode4insert_full_n;
reg    getNode4insert_write;
wire   [416:0] receiveNode4insert_dout;
wire    receiveNode4insert_empty_n;
reg    receiveNode4insert_read;
wire    writeChanges4insert_full_n;
reg    writeChanges4insert_write;
wire    overflow2split_full_n;
reg    overflow2split_write;
wire    cst_req_full_n;
reg    cst_req_write;
wire   [416:0] split2overflow_dout;
wire    split2overflow_empty_n;
reg    split2overflow_read;
wire    insertFinished_full_n;
reg    insertFinished_write;
reg    grp_memory_manager_fu_460_ap_start_reg;
wire    ap_CS_fsm_state79;
wire   [416:0] insertNode4insert_dout;
wire    insertNode4insert_empty_n;
reg    insertNode4insert_read;
wire   [31:0] getNode4insert_dout;
wire    getNode4insert_empty_n;
reg    getNode4insert_read;
wire    receiveNode4insert_full_n;
reg    receiveNode4insert_write;
wire   [416:0] writeChanges4insert_dout;
wire    writeChanges4insert_empty_n;
reg    writeChanges4insert_read;
wire   [416:0] overflow2split_dout;
wire    overflow2split_empty_n;
reg    overflow2split_read;
wire   [416:0] cst_req_dout;
wire    cst_req_empty_n;
reg    cst_req_read;
wire    split2overflow_full_n;
reg    split2overflow_write;
reg    ap_block_state80_ignore_call2;
wire  signed [63:0] sext_ln45_1_fu_588_p1;
wire  signed [63:0] sext_ln46_fu_598_p1;
reg   [31:0] debugCounter_fu_238;
reg   [31:0] operation_fu_242;
wire   [31:0] operation_2_fu_787_p2;
wire   [0:0] icmp_ln43_fu_512_p2;
wire   [0:0] icmp_ln43_1_fu_517_p2;
wire   [33:0] shl_ln_fu_534_p3;
wire  signed [63:0] sext_ln45_fu_542_p1;
wire   [63:0] add_ln45_fu_546_p2;
wire   [34:0] shl_ln9_fu_561_p3;
wire  signed [63:0] sext_ln46_1_fu_569_p1;
wire   [63:0] add_ln46_fu_573_p2;
wire   [3:0] trunc_ln45_3_fu_608_p1;
wire   [5:0] trunc_ln45_1_fu_611_p3;
wire   [5:0] add_ln45_1_fu_619_p2;
wire   [8:0] shl_ln45_1_fu_624_p3;
wire   [511:0] zext_ln45_fu_632_p1;
wire   [511:0] lshr_ln45_fu_636_p2;
wire   [31:0] curr_V_fu_641_p1;
wire   [2:0] trunc_ln46_3_fu_651_p1;
wire   [5:0] trunc_ln46_1_fu_654_p3;
wire   [5:0] add_ln46_1_fu_662_p2;
wire   [8:0] shl_ln46_1_fu_667_p3;
wire   [511:0] zext_ln46_fu_675_p1;
wire   [511:0] lshr_ln46_fu_679_p2;
wire   [207:0] shl_ln10_fu_718_p9;
wire   [207:0] or_ln65_fu_734_p2;
wire   [111:0] tmp_52_fu_740_p4;
wire   [32:0] tmp_53_fu_750_p4;
wire   [193:0] tmp3_fu_760_p5;
wire   [193:0] or_ln65_1_fu_772_p2;
wire  signed [384:0] sext_ln65_fu_778_p1;
reg   [79:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
reg    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 80'd1;
#0 grp_insert_fu_391_ap_start_reg = 1'b0;
#0 grp_memory_manager_fu_460_ap_start_reg = 1'b0;
end

krnl_insert grp_insert_fu_391(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_insert_fu_391_ap_start),
    .ap_done(grp_insert_fu_391_ap_done),
    .ap_idle(grp_insert_fu_391_ap_idle),
    .ap_ready(grp_insert_fu_391_ap_ready),
    .newLeaf2insert_dout(newLeaf2insert_dout),
    .newLeaf2insert_empty_n(newLeaf2insert_empty_n),
    .newLeaf2insert_read(grp_insert_fu_391_newLeaf2insert_read),
    .insertNode4insert_din(grp_insert_fu_391_insertNode4insert_din),
    .insertNode4insert_full_n(insertNode4insert_full_n),
    .insertNode4insert_write(grp_insert_fu_391_insertNode4insert_write),
    .getNode4insert2_din(grp_insert_fu_391_getNode4insert2_din),
    .getNode4insert2_full_n(getNode4insert_full_n),
    .getNode4insert2_write(grp_insert_fu_391_getNode4insert2_write),
    .receiveNode4insert_dout(receiveNode4insert_dout),
    .receiveNode4insert_empty_n(receiveNode4insert_empty_n),
    .receiveNode4insert_read(grp_insert_fu_391_receiveNode4insert_read),
    .writeChanges4insert_din(grp_insert_fu_391_writeChanges4insert_din),
    .writeChanges4insert_full_n(writeChanges4insert_full_n),
    .writeChanges4insert_write(grp_insert_fu_391_writeChanges4insert_write),
    .overflow2split_din(grp_insert_fu_391_overflow2split_din),
    .overflow2split_full_n(overflow2split_full_n),
    .overflow2split_write(grp_insert_fu_391_overflow2split_write),
    .cst_req_din(grp_insert_fu_391_cst_req_din),
    .cst_req_full_n(cst_req_full_n),
    .cst_req_write(grp_insert_fu_391_cst_req_write),
    .split2overflow_dout(split2overflow_dout),
    .split2overflow_empty_n(split2overflow_empty_n),
    .split2overflow_read(grp_insert_fu_391_split2overflow_read),
    .insertFinished3_din(grp_insert_fu_391_insertFinished3_din),
    .insertFinished3_full_n(insertFinished_full_n),
    .insertFinished3_write(grp_insert_fu_391_insertFinished3_write)
);

krnl_memory_manager grp_memory_manager_fu_460(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_memory_manager_fu_460_ap_start),
    .ap_done(grp_memory_manager_fu_460_ap_done),
    .ap_idle(grp_memory_manager_fu_460_ap_idle),
    .ap_ready(grp_memory_manager_fu_460_ap_ready),
    .insertNode4insert_dout(insertNode4insert_dout),
    .insertNode4insert_empty_n(insertNode4insert_empty_n),
    .insertNode4insert_read(grp_memory_manager_fu_460_insertNode4insert_read),
    .getNode4insert2_dout(getNode4insert_dout),
    .getNode4insert2_empty_n(getNode4insert_empty_n),
    .getNode4insert2_read(grp_memory_manager_fu_460_getNode4insert2_read),
    .receiveNode4insert_din(grp_memory_manager_fu_460_receiveNode4insert_din),
    .receiveNode4insert_full_n(receiveNode4insert_full_n),
    .receiveNode4insert_write(grp_memory_manager_fu_460_receiveNode4insert_write),
    .writeChanges4insert_dout(writeChanges4insert_dout),
    .writeChanges4insert_empty_n(writeChanges4insert_empty_n),
    .writeChanges4insert_read(grp_memory_manager_fu_460_writeChanges4insert_read),
    .overflow2split_dout(overflow2split_dout),
    .overflow2split_empty_n(overflow2split_empty_n),
    .overflow2split_read(grp_memory_manager_fu_460_overflow2split_read),
    .cst_req_dout(cst_req_dout),
    .cst_req_empty_n(cst_req_empty_n),
    .cst_req_read(grp_memory_manager_fu_460_cst_req_read),
    .split2overflow_din(grp_memory_manager_fu_460_split2overflow_din),
    .split2overflow_full_n(split2overflow_full_n),
    .split2overflow_write(grp_memory_manager_fu_460_split2overflow_write),
    .m_axi_gmem_AWVALID(grp_memory_manager_fu_460_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_memory_manager_fu_460_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_memory_manager_fu_460_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_memory_manager_fu_460_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_memory_manager_fu_460_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_memory_manager_fu_460_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_memory_manager_fu_460_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_memory_manager_fu_460_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_memory_manager_fu_460_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_memory_manager_fu_460_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_memory_manager_fu_460_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_memory_manager_fu_460_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_memory_manager_fu_460_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_memory_manager_fu_460_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_memory_manager_fu_460_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_memory_manager_fu_460_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_memory_manager_fu_460_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_memory_manager_fu_460_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_memory_manager_fu_460_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_memory_manager_fu_460_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_memory_manager_fu_460_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_memory_manager_fu_460_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_memory_manager_fu_460_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_memory_manager_fu_460_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_memory_manager_fu_460_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_memory_manager_fu_460_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_memory_manager_fu_460_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_memory_manager_fu_460_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_memory_manager_fu_460_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_memory_manager_fu_460_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_memory_manager_fu_460_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_memory_manager_fu_460_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .HBM_PTR(HBM_PTR_read_reg_835)
);

krnl_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .HBM_PTR(HBM_PTR),
    .operations(operations),
    .parameters_for_operations(parameters_for_operations),
    .number_of_operations(number_of_operations),
    .board_num(board_num),
    .exe(exe)
);

krnl_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_memory_manager_fu_460_m_axi_gmem_AWADDR),
    .I_AWLEN(grp_memory_manager_fu_460_m_axi_gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_memory_manager_fu_460_m_axi_gmem_WDATA),
    .I_WSTRB(grp_memory_manager_fu_460_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

krnl_fifo_w417_d2_S newLeaf2insert_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(newLeaf2insert_din),
    .if_full_n(newLeaf2insert_full_n),
    .if_write(newLeaf2insert_write),
    .if_dout(newLeaf2insert_dout),
    .if_empty_n(newLeaf2insert_empty_n),
    .if_read(newLeaf2insert_read)
);

krnl_fifo_w417_d2_S insertNode4insert_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_insertNode4insert_din),
    .if_full_n(insertNode4insert_full_n),
    .if_write(insertNode4insert_write),
    .if_dout(insertNode4insert_dout),
    .if_empty_n(insertNode4insert_empty_n),
    .if_read(insertNode4insert_read)
);

krnl_fifo_w32_d2_S getNode4insert_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_getNode4insert2_din),
    .if_full_n(getNode4insert_full_n),
    .if_write(getNode4insert_write),
    .if_dout(getNode4insert_dout),
    .if_empty_n(getNode4insert_empty_n),
    .if_read(getNode4insert_read)
);

krnl_fifo_w417_d2_S receiveNode4insert_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_memory_manager_fu_460_receiveNode4insert_din),
    .if_full_n(receiveNode4insert_full_n),
    .if_write(receiveNode4insert_write),
    .if_dout(receiveNode4insert_dout),
    .if_empty_n(receiveNode4insert_empty_n),
    .if_read(receiveNode4insert_read)
);

krnl_fifo_w417_d2_S writeChanges4insert_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_writeChanges4insert_din),
    .if_full_n(writeChanges4insert_full_n),
    .if_write(writeChanges4insert_write),
    .if_dout(writeChanges4insert_dout),
    .if_empty_n(writeChanges4insert_empty_n),
    .if_read(writeChanges4insert_read)
);

krnl_fifo_w417_d2_S overflow2split_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_overflow2split_din),
    .if_full_n(overflow2split_full_n),
    .if_write(overflow2split_write),
    .if_dout(overflow2split_dout),
    .if_empty_n(overflow2split_empty_n),
    .if_read(overflow2split_read)
);

krnl_fifo_w417_d2_S cst_req_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_cst_req_din),
    .if_full_n(cst_req_full_n),
    .if_write(cst_req_write),
    .if_dout(cst_req_dout),
    .if_empty_n(cst_req_empty_n),
    .if_read(cst_req_read)
);

krnl_fifo_w417_d2_S split2overflow_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_memory_manager_fu_460_split2overflow_din),
    .if_full_n(split2overflow_full_n),
    .if_write(split2overflow_write),
    .if_dout(split2overflow_dout),
    .if_empty_n(split2overflow_empty_n),
    .if_read(split2overflow_read)
);

krnl_fifo_w1_d2_S insertFinished_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_insert_fu_391_insertFinished3_din),
    .if_full_n(insertFinished_full_n),
    .if_write(insertFinished_write),
    .if_dout(insertFinished_dout),
    .if_empty_n(insertFinished_empty_n),
    .if_read(insertFinished_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_insert_fu_391_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            grp_insert_fu_391_ap_start_reg <= 1'b1;
        end else if ((grp_insert_fu_391_ap_ready == 1'b1)) begin
            grp_insert_fu_391_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_memory_manager_fu_460_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            grp_memory_manager_fu_460_ap_start_reg <= 1'b1;
        end else if ((grp_memory_manager_fu_460_ap_ready == 1'b1)) begin
            grp_memory_manager_fu_460_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        debugCounter_fu_238 <= 32'd0;
    end else if ((~((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
        debugCounter_fu_238 <= debugCounter_3_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_948 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        insertFin_1_reg_366 <= insertFin_reg_354;
    end else if ((~((newLeaf2insert_full_n == 1'b0) & (insertFin_reg_354 == 1'd1)) & (1'b1 == ap_CS_fsm_state76))) begin
        insertFin_1_reg_366 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
        insertFin_reg_354 <= ap_phi_mux_insertFin_3_phi_fu_382_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        insertFin_reg_354 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        operation_fu_242 <= 32'd0;
    end else if ((~((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0))) & (tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        operation_fu_242 <= operation_2_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HBM_PTR_read_reg_835 <= HBM_PTR;
        exe_read_reg_815 <= exe;
        number_of_operations_read_reg_820 <= number_of_operations;
        operations_read_reg_830 <= operations;
        parameters_for_operations_read_reg_825 <= parameters_for_operations;
        trunc_ln45_reg_895 <= trunc_ln45_fu_488_p1;
        trunc_ln46_reg_900 <= trunc_ln46_fu_492_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        debugCounter_3_reg_911 <= debugCounter_3_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem_addr_33_read_reg_943 <= gmem_RDATA;
        icmp_ln48_reg_948 <= icmp_ln48_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_addr_read_reg_938 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((insertFin_reg_354 == 1'd1) & (icmp_ln48_reg_948 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        tmp_50_reg_962 <= {{lshr_ln46_fu_679_p2[47:32]}};
        tmp_51_reg_967 <= {{lshr_ln46_fu_679_p2[63:48]}};
        tmp_s_reg_957 <= {{lshr_ln46_fu_679_p2[31:16]}};
        trunc_ln668_reg_952 <= trunc_ln668_fu_684_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln43_fu_522_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln45_2_reg_916 <= {{add_ln45_fu_546_p2[63:6]}};
        trunc_ln46_2_reg_921 <= {{add_ln46_fu_573_p2[63:6]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if (((newLeaf2insert_full_n == 1'b0) & (insertFin_reg_354 == 1'd1))) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

always @ (*) begin
    if ((grp_insert_fu_391_ap_done == 1'b0)) begin
        ap_ST_fsm_state78_blk = 1'b1;
    end else begin
        ap_ST_fsm_state78_blk = 1'b0;
    end
end

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0)))) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln43_fu_522_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        if ((tmp_54_nbreadreq_fu_342_p3 == 1'd0)) begin
            ap_phi_mux_insertFin_3_phi_fu_382_p4 = insertFin_1_reg_366;
        end else if ((tmp_54_nbreadreq_fu_342_p3 == 1'd1)) begin
            ap_phi_mux_insertFin_3_phi_fu_382_p4 = insertFinished_dout;
        end else begin
            ap_phi_mux_insertFin_3_phi_fu_382_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_insertFin_3_phi_fu_382_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln43_fu_522_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        cst_req_read = grp_memory_manager_fu_460_cst_req_read;
    end else begin
        cst_req_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        cst_req_write = grp_insert_fu_391_cst_req_write;
    end else begin
        cst_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        getNode4insert_read = grp_memory_manager_fu_460_getNode4insert2_read;
    end else begin
        getNode4insert_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        getNode4insert_write = grp_insert_fu_391_getNode4insert2_write;
    end else begin
        getNode4insert_write = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = sext_ln46_fu_598_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARADDR = sext_ln45_1_fu_588_p1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_ARADDR = grp_memory_manager_fu_460_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_ARLEN = grp_memory_manager_fu_460_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_ARVALID = grp_memory_manager_fu_460_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_AWVALID = grp_memory_manager_fu_460_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_BREADY = grp_memory_manager_fu_460_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_RREADY = grp_memory_manager_fu_460_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_WVALID = grp_memory_manager_fu_460_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0))) & (tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        insertFinished_read = 1'b1;
    end else begin
        insertFinished_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        insertFinished_write = grp_insert_fu_391_insertFinished3_write;
    end else begin
        insertFinished_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        insertNode4insert_read = grp_memory_manager_fu_460_insertNode4insert_read;
    end else begin
        insertNode4insert_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        insertNode4insert_write = grp_insert_fu_391_insertNode4insert_write;
    end else begin
        insertNode4insert_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        newLeaf2insert_read = grp_insert_fu_391_newLeaf2insert_read;
    end else begin
        newLeaf2insert_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((newLeaf2insert_full_n == 1'b0) & (insertFin_reg_354 == 1'd1)) & (insertFin_reg_354 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        newLeaf2insert_write = 1'b1;
    end else begin
        newLeaf2insert_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        overflow2split_read = grp_memory_manager_fu_460_overflow2split_read;
    end else begin
        overflow2split_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        overflow2split_write = grp_insert_fu_391_overflow2split_write;
    end else begin
        overflow2split_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        receiveNode4insert_read = grp_insert_fu_391_receiveNode4insert_read;
    end else begin
        receiveNode4insert_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        receiveNode4insert_write = grp_memory_manager_fu_460_receiveNode4insert_write;
    end else begin
        receiveNode4insert_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        split2overflow_read = grp_insert_fu_391_split2overflow_read;
    end else begin
        split2overflow_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        split2overflow_write = grp_memory_manager_fu_460_split2overflow_write;
    end else begin
        split2overflow_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        writeChanges4insert_read = grp_memory_manager_fu_460_writeChanges4insert_read;
    end else begin
        writeChanges4insert_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        writeChanges4insert_write = grp_insert_fu_391_writeChanges4insert_write;
    end else begin
        writeChanges4insert_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd0 == and_ln43_fu_522_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln48_reg_948 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state76 : begin
            if ((~((newLeaf2insert_full_n == 1'b0) & (insertFin_reg_354 == 1'd1)) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((grp_insert_fu_391_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if ((~((grp_memory_manager_fu_460_ap_done == 1'b0) | ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_1_fu_619_p2 = (trunc_ln45_1_fu_611_p3 + trunc_ln45_reg_895);

assign add_ln45_fu_546_p2 = ($signed(sext_ln45_fu_542_p1) + $signed(operations_read_reg_830));

assign add_ln46_1_fu_662_p2 = (trunc_ln46_1_fu_654_p3 + trunc_ln46_reg_900);

assign add_ln46_fu_573_p2 = ($signed(sext_ln46_1_fu_569_p1) + $signed(parameters_for_operations_read_reg_825));

assign and_ln43_fu_522_p2 = (icmp_ln43_fu_512_p2 & icmp_ln43_1_fu_517_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

always @ (*) begin
    ap_block_state76 = ((newLeaf2insert_full_n == 1'b0) & (insertFin_reg_354 == 1'd1));
end

always @ (*) begin
    ap_block_state80 = ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state80_ignore_call2 = ((tmp_54_nbreadreq_fu_342_p3 == 1'd1) & (insertFinished_empty_n == 1'b0));
end

assign curr_V_fu_641_p1 = lshr_ln45_fu_636_p2[31:0];

assign debugCounter_3_fu_528_p2 = (debugCounter_fu_238 + 32'd1);

assign grp_insert_fu_391_ap_start = grp_insert_fu_391_ap_start_reg;

assign grp_memory_manager_fu_460_ap_start = grp_memory_manager_fu_460_ap_start_reg;

assign icmp_ln43_1_fu_517_p2 = (($signed(debugCounter_fu_238) < $signed(exe_read_reg_815)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_512_p2 = (($signed(operation_fu_242) < $signed(number_of_operations_read_reg_820)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_645_p2 = ((curr_V_fu_641_p1 == 32'd1) ? 1'b1 : 1'b0);

assign lshr_ln45_fu_636_p2 = gmem_addr_read_reg_938 >> zext_ln45_fu_632_p1;

assign lshr_ln46_fu_679_p2 = gmem_addr_33_read_reg_943 >> zext_ln46_fu_675_p1;

assign newLeaf2insert_din = $unsigned(sext_ln65_fu_778_p1);

assign operation_2_fu_787_p2 = (operation_fu_242 + 32'd1);

assign or_ln65_1_fu_772_p2 = (tmp3_fu_760_p5 | 194'd4294967295);

assign or_ln65_fu_734_p2 = (shl_ln10_fu_718_p9 | 208'd36893488147419103231);

assign sext_ln45_1_fu_588_p1 = $signed(trunc_ln45_2_reg_916);

assign sext_ln45_fu_542_p1 = $signed(shl_ln_fu_534_p3);

assign sext_ln46_1_fu_569_p1 = $signed(shl_ln9_fu_561_p3);

assign sext_ln46_fu_598_p1 = $signed(trunc_ln46_2_reg_921);

assign sext_ln65_fu_778_p1 = $signed(or_ln65_1_fu_772_p2);

assign shl_ln10_fu_718_p9 = {{{{{{{{tmp_51_reg_967}, {16'd0}}, {tmp_50_reg_962}}, {16'd0}}, {tmp_s_reg_957}}, {16'd0}}, {trunc_ln668_reg_952}}, {96'd0}};

assign shl_ln45_1_fu_624_p3 = {{add_ln45_1_fu_619_p2}, {3'd0}};

assign shl_ln46_1_fu_667_p3 = {{add_ln46_1_fu_662_p2}, {3'd0}};

assign shl_ln9_fu_561_p3 = {{operation_fu_242}, {3'd0}};

assign shl_ln_fu_534_p3 = {{operation_fu_242}, {2'd0}};

assign tmp3_fu_760_p5 = {{{{{{17'd65536}, {tmp_52_fu_740_p4}}}, {tmp_53_fu_750_p4}}}, {32'd0}};

assign tmp_52_fu_740_p4 = {{or_ln65_fu_734_p2[207:96]}};

assign tmp_53_fu_750_p4 = {{or_ln65_fu_734_p2[64:32]}};

assign tmp_54_nbreadreq_fu_342_p3 = insertFinished_empty_n;

assign trunc_ln45_1_fu_611_p3 = {{trunc_ln45_3_fu_608_p1}, {2'd0}};

assign trunc_ln45_3_fu_608_p1 = operation_fu_242[3:0];

assign trunc_ln45_fu_488_p1 = operations[5:0];

assign trunc_ln46_1_fu_654_p3 = {{trunc_ln46_3_fu_651_p1}, {3'd0}};

assign trunc_ln46_3_fu_651_p1 = operation_fu_242[2:0];

assign trunc_ln46_fu_492_p1 = parameters_for_operations[5:0];

assign trunc_ln668_fu_684_p1 = lshr_ln46_fu_679_p2[15:0];

assign zext_ln45_fu_632_p1 = shl_ln45_1_fu_624_p3;

assign zext_ln46_fu_675_p1 = shl_ln46_1_fu_667_p3;

endmodule //krnl
