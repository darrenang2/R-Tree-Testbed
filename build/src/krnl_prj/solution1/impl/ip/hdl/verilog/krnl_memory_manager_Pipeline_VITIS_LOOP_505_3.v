// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_memory_manager_Pipeline_VITIS_LOOP_505_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pair_areaEnlargement,
        curNode_child_address0,
        curNode_child_ce0,
        curNode_child_q0,
        array_size_i,
        array_size_o,
        array_size_o_ap_vld,
        AreaEnlargementArray_index_address0,
        AreaEnlargementArray_index_ce0,
        AreaEnlargementArray_index_we0,
        AreaEnlargementArray_index_d0,
        AreaEnlargementArray_areaEnlargement_address0,
        AreaEnlargementArray_areaEnlargement_ce0,
        AreaEnlargementArray_areaEnlargement_we0,
        AreaEnlargementArray_areaEnlargement_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] pair_areaEnlargement;
output  [2:0] curNode_child_address0;
output   curNode_child_ce0;
input  [31:0] curNode_child_q0;
input  [31:0] array_size_i;
output  [31:0] array_size_o;
output   array_size_o_ap_vld;
output  [6:0] AreaEnlargementArray_index_address0;
output   AreaEnlargementArray_index_ce0;
output   AreaEnlargementArray_index_we0;
output  [31:0] AreaEnlargementArray_index_d0;
output  [6:0] AreaEnlargementArray_areaEnlargement_address0;
output   AreaEnlargementArray_areaEnlargement_ce0;
output   AreaEnlargementArray_areaEnlargement_we0;
output  [31:0] AreaEnlargementArray_areaEnlargement_d0;

reg ap_idle;
reg curNode_child_ce0;
reg[31:0] array_size_o;
reg array_size_o_ap_vld;
reg AreaEnlargementArray_index_ce0;
reg AreaEnlargementArray_index_we0;
reg AreaEnlargementArray_areaEnlargement_ce0;
reg AreaEnlargementArray_areaEnlargement_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] icmp_ln506_fu_117_p2;
reg   [0:0] icmp_ln505_reg_161;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln505_fu_100_p2;
wire   [2:0] add_ln505_fu_106_p2;
reg   [2:0] add_ln505_reg_165;
wire   [63:0] i_4_cast_fu_112_p1;
wire   [63:0] zext_ln515_fu_139_p1;
wire   [31:0] add_ln515_fu_127_p2;
reg   [2:0] i_4_fu_42;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

krnl_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_4_fu_42 <= 3'd0;
    end else if (((icmp_ln505_reg_161 == 1'd0) & (icmp_ln506_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_4_fu_42 <= add_ln505_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln505_reg_165 <= add_ln505_fu_106_p2;
        icmp_ln505_reg_161 <= icmp_ln505_fu_100_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AreaEnlargementArray_areaEnlargement_ce0 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln505_reg_161 == 1'd0) & (icmp_ln506_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        AreaEnlargementArray_areaEnlargement_we0 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AreaEnlargementArray_index_ce0 = 1'b1;
    end else begin
        AreaEnlargementArray_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln505_reg_161 == 1'd0) & (icmp_ln506_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        AreaEnlargementArray_index_we0 = 1'b1;
    end else begin
        AreaEnlargementArray_index_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln505_reg_161 == 1'd1) | (icmp_ln506_fu_117_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_42;
    end
end

always @ (*) begin
    if (((icmp_ln505_reg_161 == 1'd0) & (icmp_ln506_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        array_size_o = add_ln515_fu_127_p2;
    end else begin
        array_size_o = array_size_i;
    end
end

always @ (*) begin
    if (((icmp_ln505_reg_161 == 1'd0) & (icmp_ln506_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        array_size_o_ap_vld = 1'b1;
    end else begin
        array_size_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        curNode_child_ce0 = 1'b1;
    end else begin
        curNode_child_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AreaEnlargementArray_areaEnlargement_address0 = zext_ln515_fu_139_p1;

assign AreaEnlargementArray_areaEnlargement_d0 = pair_areaEnlargement;

assign AreaEnlargementArray_index_address0 = zext_ln515_fu_139_p1;

assign AreaEnlargementArray_index_d0 = curNode_child_q0;

assign add_ln505_fu_106_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln515_fu_127_p2 = (array_size_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign curNode_child_address0 = i_4_cast_fu_112_p1;

assign i_4_cast_fu_112_p1 = ap_sig_allocacmp_i;

assign icmp_ln505_fu_100_p2 = ((ap_sig_allocacmp_i == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln506_fu_117_p2 = ((curNode_child_q0 == 32'd4294967295) ? 1'b1 : 1'b0);

assign zext_ln515_fu_139_p1 = array_size_i;

endmodule //krnl_memory_manager_Pipeline_VITIS_LOOP_505_3
