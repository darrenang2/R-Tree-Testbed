// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_memory_manager_Pipeline_VITIS_LOOP_17_1_VITIS_LOOP_19_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln520,
        sext_ln17_1,
        AreaEnlargementArray_areaEnlargement_address0,
        AreaEnlargementArray_areaEnlargement_ce0,
        AreaEnlargementArray_areaEnlargement_we0,
        AreaEnlargementArray_areaEnlargement_d0,
        AreaEnlargementArray_areaEnlargement_q0,
        AreaEnlargementArray_areaEnlargement_address1,
        AreaEnlargementArray_areaEnlargement_ce1,
        AreaEnlargementArray_areaEnlargement_we1,
        AreaEnlargementArray_areaEnlargement_d1,
        AreaEnlargementArray_areaEnlargement_q1,
        AreaEnlargementArray_index_address0,
        AreaEnlargementArray_index_ce0,
        AreaEnlargementArray_index_we0,
        AreaEnlargementArray_index_d0,
        AreaEnlargementArray_index_q0,
        AreaEnlargementArray_index_address1,
        AreaEnlargementArray_index_ce1,
        AreaEnlargementArray_index_we1,
        AreaEnlargementArray_index_d1,
        AreaEnlargementArray_index_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] mul_ln520;
input  [31:0] sext_ln17_1;
output  [6:0] AreaEnlargementArray_areaEnlargement_address0;
output   AreaEnlargementArray_areaEnlargement_ce0;
output   AreaEnlargementArray_areaEnlargement_we0;
output  [31:0] AreaEnlargementArray_areaEnlargement_d0;
input  [31:0] AreaEnlargementArray_areaEnlargement_q0;
output  [6:0] AreaEnlargementArray_areaEnlargement_address1;
output   AreaEnlargementArray_areaEnlargement_ce1;
output   AreaEnlargementArray_areaEnlargement_we1;
output  [31:0] AreaEnlargementArray_areaEnlargement_d1;
input  [31:0] AreaEnlargementArray_areaEnlargement_q1;
output  [6:0] AreaEnlargementArray_index_address0;
output   AreaEnlargementArray_index_ce0;
output   AreaEnlargementArray_index_we0;
output  [31:0] AreaEnlargementArray_index_d0;
input  [31:0] AreaEnlargementArray_index_q0;
output  [6:0] AreaEnlargementArray_index_address1;
output   AreaEnlargementArray_index_ce1;
output   AreaEnlargementArray_index_we1;
output  [31:0] AreaEnlargementArray_index_d1;
input  [31:0] AreaEnlargementArray_index_q1;

reg ap_idle;
reg[6:0] AreaEnlargementArray_areaEnlargement_address0;
reg AreaEnlargementArray_areaEnlargement_ce0;
reg AreaEnlargementArray_areaEnlargement_we0;
reg[6:0] AreaEnlargementArray_areaEnlargement_address1;
reg AreaEnlargementArray_areaEnlargement_ce1;
reg AreaEnlargementArray_areaEnlargement_we1;
reg AreaEnlargementArray_index_ce0;
reg AreaEnlargementArray_index_we0;
reg[6:0] AreaEnlargementArray_index_address1;
reg AreaEnlargementArray_index_ce1;
reg AreaEnlargementArray_index_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln17_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln17_1_cast_fu_111_p1;
reg  signed [63:0] sext_ln17_1_cast_reg_210;
reg   [0:0] icmp_ln17_reg_215;
wire    ap_block_pp0_stage1_11001;
wire   [95:0] add_ln17_fu_133_p2;
reg   [95:0] add_ln17_reg_219;
reg   [63:0] i_6_load_reg_224;
wire   [0:0] icmp_ln19_fu_142_p2;
reg   [0:0] icmp_ln19_reg_229;
wire   [63:0] select_ln17_fu_147_p3;
reg   [63:0] select_ln17_reg_234;
reg   [6:0] xp_areaEnlargement_reg_239;
reg   [6:0] b_index_reg_244;
reg   [6:0] yp_areaEnlargement_reg_249;
reg   [6:0] a_index_reg_254;
wire   [0:0] icmp_ln5_fu_185_p2;
reg   [0:0] icmp_ln5_reg_259;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln21_fu_164_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] i_6_fu_38;
wire   [63:0] add_ln19_fu_170_p2;
wire    ap_loop_init;
reg   [95:0] indvar_flatten795_fu_42;
wire   [6:0] empty_fu_154_p1;
wire   [6:0] add_ln21_fu_158_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_6_fu_38 <= 64'd1;
        end else if (((icmp_ln17_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_6_fu_38 <= add_ln19_fu_170_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten795_fu_42 <= 96'd0;
        end else if (((icmp_ln17_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten795_fu_42 <= add_ln17_reg_219;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_index_reg_254 <= select_ln17_reg_234;
        add_ln17_reg_219 <= add_ln17_fu_133_p2;
        icmp_ln17_reg_215 <= icmp_ln17_fu_128_p2;
        icmp_ln5_reg_259 <= icmp_ln5_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_index_reg_244 <= zext_ln21_fu_164_p1;
        select_ln17_reg_234 <= select_ln17_fu_147_p3;
        xp_areaEnlargement_reg_239 <= select_ln17_fu_147_p3;
        yp_areaEnlargement_reg_249 <= zext_ln21_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_128_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_6_load_reg_224 <= i_6_fu_38;
        icmp_ln19_reg_229 <= icmp_ln19_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln17_1_cast_reg_210 <= sext_ln17_1_cast_fu_111_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            AreaEnlargementArray_areaEnlargement_address0 = yp_areaEnlargement_reg_249;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            AreaEnlargementArray_areaEnlargement_address0 = zext_ln21_fu_164_p1;
        end else begin
            AreaEnlargementArray_areaEnlargement_address0 = 'bx;
        end
    end else begin
        AreaEnlargementArray_areaEnlargement_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            AreaEnlargementArray_areaEnlargement_address1 = xp_areaEnlargement_reg_239;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            AreaEnlargementArray_areaEnlargement_address1 = select_ln17_fu_147_p3;
        end else begin
            AreaEnlargementArray_areaEnlargement_address1 = 'bx;
        end
    end else begin
        AreaEnlargementArray_areaEnlargement_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        AreaEnlargementArray_areaEnlargement_ce0 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        AreaEnlargementArray_areaEnlargement_ce1 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln5_fu_185_p2 == 1'd1))) begin
        AreaEnlargementArray_areaEnlargement_we0 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln5_fu_185_p2 == 1'd1))) begin
        AreaEnlargementArray_areaEnlargement_we1 = 1'b1;
    end else begin
        AreaEnlargementArray_areaEnlargement_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AreaEnlargementArray_index_address1 = a_index_reg_254;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AreaEnlargementArray_index_address1 = select_ln17_reg_234;
    end else begin
        AreaEnlargementArray_index_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        AreaEnlargementArray_index_ce0 = 1'b1;
    end else begin
        AreaEnlargementArray_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        AreaEnlargementArray_index_ce1 = 1'b1;
    end else begin
        AreaEnlargementArray_index_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_reg_259 == 1'd1))) begin
        AreaEnlargementArray_index_we0 = 1'b1;
    end else begin
        AreaEnlargementArray_index_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_reg_259 == 1'd1))) begin
        AreaEnlargementArray_index_we1 = 1'b1;
    end else begin
        AreaEnlargementArray_index_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_215 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AreaEnlargementArray_areaEnlargement_d0 = AreaEnlargementArray_areaEnlargement_q1;

assign AreaEnlargementArray_areaEnlargement_d1 = AreaEnlargementArray_areaEnlargement_q0;

assign AreaEnlargementArray_index_address0 = b_index_reg_244;

assign AreaEnlargementArray_index_d0 = AreaEnlargementArray_index_q1;

assign AreaEnlargementArray_index_d1 = AreaEnlargementArray_index_q0;

assign add_ln17_fu_133_p2 = (indvar_flatten795_fu_42 + 96'd1);

assign add_ln19_fu_170_p2 = (select_ln17_fu_147_p3 + 64'd1);

assign add_ln21_fu_158_p2 = ($signed(empty_fu_154_p1) + $signed(7'd127));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_fu_154_p1 = select_ln17_fu_147_p3[6:0];

assign icmp_ln17_fu_128_p2 = ((indvar_flatten795_fu_42 == mul_ln520) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_142_p2 = ((i_6_fu_38 == sext_ln17_1_cast_reg_210) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_185_p2 = (($signed(AreaEnlargementArray_areaEnlargement_q1) < $signed(AreaEnlargementArray_areaEnlargement_q0)) ? 1'b1 : 1'b0);

assign select_ln17_fu_147_p3 = ((icmp_ln19_reg_229[0:0] == 1'b1) ? 64'd1 : i_6_load_reg_224);

assign sext_ln17_1_cast_fu_111_p1 = $signed(sext_ln17_1);

assign zext_ln21_fu_164_p1 = add_ln21_fu_158_p2;

endmodule //krnl_memory_manager_Pipeline_VITIS_LOOP_17_1_VITIS_LOOP_19_21
