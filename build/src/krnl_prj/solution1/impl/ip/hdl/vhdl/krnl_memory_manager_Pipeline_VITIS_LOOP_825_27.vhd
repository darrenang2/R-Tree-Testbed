-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_memory_manager_Pipeline_VITIS_LOOP_825_27 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    node_child_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    node_child_ce0 : OUT STD_LOGIC;
    node_child_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    HBM_PTR : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln12 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    hasValidChild_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    hasValidChild_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of krnl_memory_manager_Pipeline_VITIS_LOOP_825_27 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal icmp_ln825_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op134_readreq_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state48_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state52_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_state60_pp0_stage1_iter29 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter30 : BOOLEAN;
    signal ap_block_state64_pp0_stage1_iter31 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter32 : BOOLEAN;
    signal ap_block_state68_pp0_stage1_iter33 : BOOLEAN;
    signal ap_block_state70_pp0_stage1_iter34 : BOOLEAN;
    signal ap_block_state72_pp0_stage1_iter35 : BOOLEAN;
    signal icmp_ln825_reg_672_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op204_read_state74 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter36 : BOOLEAN;
    signal ap_block_state76_pp0_stage1_iter37 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln828_reg_681_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter36 : BOOLEAN;
    signal ap_predicate_op205_read_state75 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln825_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln825_reg_672_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln828_reg_681_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln828_reg_681_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln831_fu_347_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal sub_ln831_reg_685 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln831_1_fu_357_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter25_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter26_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter27_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter28_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter29_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter30_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter31_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter32_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter33_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter34_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter35_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln831_1_reg_690_pp0_iter36_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln831_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln831_reg_696_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_700 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln831_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln831_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_reg_716 : STD_LOGIC_VECTOR (511 downto 0);
    signal childNode_box_minX_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal childNode_box_maxX_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal childNode_box_minY_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal childNode_box_maxY_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter11_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter12_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter13_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter14_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter15_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter16_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter17_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter18_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter19_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter20_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter21_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter22_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter23_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter24_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter25_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter26_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter27_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter28_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter29_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter30_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter31_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter32_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter33_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter34_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter35_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter36_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter37_empty_63_reg_231 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_15_cast_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln831_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln825_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal hasValidChild_fu_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal minX_3_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal minX_4_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxX_3_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxX_4_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal minY_3_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal minY_4_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxY_3_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxY_4_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxY_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal minY_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxX_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal minX_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln831_1_fu_323_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal shl_ln831_2_fu_335_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln831_fu_331_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln831_2_fu_343_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln831_fu_353_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln831_3_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln831_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_410_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_403_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln831_fu_417_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln831_fu_421_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln200_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_2_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter37_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to36 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to38 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component krnl_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter25_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter26_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter28_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter29_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter30_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter31_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter32_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter33_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter34_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter35_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter36_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter37_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter37_empty_63_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln831_reg_696_pp0_iter36_reg = ap_const_lv1_1) and (icmp_ln828_reg_681_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter37_empty_63_reg_231 <= m_axi_gmem_RDATA;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter37_empty_63_reg_231 <= ap_phi_reg_pp0_iter36_empty_63_reg_231;
            end if; 
        end if;
    end process;

    hasValidChild_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    hasValidChild_fu_124 <= ap_const_lv1_0;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    hasValidChild_fu_124 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln825_fu_295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_120 <= add_ln825_fu_301_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_120 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    maxX_3_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    maxX_3_fu_132 <= ap_const_lv32_80000000;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    maxX_3_fu_132 <= maxX_4_fu_496_p3;
                end if;
            end if; 
        end if;
    end process;

    maxX_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    maxX_fu_152 <= ap_const_lv32_80000000;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    maxX_fu_152 <= maxX_4_fu_496_p3;
                end if;
            end if; 
        end if;
    end process;

    maxY_3_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    maxY_3_fu_140 <= ap_const_lv32_80000000;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    maxY_3_fu_140 <= maxY_4_fu_520_p3;
                end if;
            end if; 
        end if;
    end process;

    maxY_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    maxY_fu_144 <= ap_const_lv32_80000000;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    maxY_fu_144 <= maxY_4_fu_520_p3;
                end if;
            end if; 
        end if;
    end process;

    minX_3_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    minX_3_fu_128 <= ap_const_lv32_7FFFFFFF;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    minX_3_fu_128 <= minX_4_fu_484_p3;
                end if;
            end if; 
        end if;
    end process;

    minX_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    minX_fu_156 <= ap_const_lv32_7FFFFFFF;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    minX_fu_156 <= minX_4_fu_484_p3;
                end if;
            end if; 
        end if;
    end process;

    minY_3_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    minY_3_fu_136 <= ap_const_lv32_7FFFFFFF;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    minY_3_fu_136 <= minY_4_fu_508_p3;
                end if;
            end if; 
        end if;
    end process;

    minY_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    minY_fu_148 <= ap_const_lv32_7FFFFFFF;
                elsif (((icmp_ln828_reg_681_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
                    minY_fu_148 <= minY_4_fu_508_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln828_fu_317_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln825_reg_672 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln831_1_reg_690 <= add_ln831_1_fu_357_p2;
                    sub_ln831_reg_685(38 downto 3) <= sub_ln831_fu_347_p2(38 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln831_1_reg_690_pp0_iter10_reg <= add_ln831_1_reg_690_pp0_iter9_reg;
                add_ln831_1_reg_690_pp0_iter11_reg <= add_ln831_1_reg_690_pp0_iter10_reg;
                add_ln831_1_reg_690_pp0_iter12_reg <= add_ln831_1_reg_690_pp0_iter11_reg;
                add_ln831_1_reg_690_pp0_iter13_reg <= add_ln831_1_reg_690_pp0_iter12_reg;
                add_ln831_1_reg_690_pp0_iter14_reg <= add_ln831_1_reg_690_pp0_iter13_reg;
                add_ln831_1_reg_690_pp0_iter15_reg <= add_ln831_1_reg_690_pp0_iter14_reg;
                add_ln831_1_reg_690_pp0_iter16_reg <= add_ln831_1_reg_690_pp0_iter15_reg;
                add_ln831_1_reg_690_pp0_iter17_reg <= add_ln831_1_reg_690_pp0_iter16_reg;
                add_ln831_1_reg_690_pp0_iter18_reg <= add_ln831_1_reg_690_pp0_iter17_reg;
                add_ln831_1_reg_690_pp0_iter19_reg <= add_ln831_1_reg_690_pp0_iter18_reg;
                add_ln831_1_reg_690_pp0_iter1_reg <= add_ln831_1_reg_690;
                add_ln831_1_reg_690_pp0_iter20_reg <= add_ln831_1_reg_690_pp0_iter19_reg;
                add_ln831_1_reg_690_pp0_iter21_reg <= add_ln831_1_reg_690_pp0_iter20_reg;
                add_ln831_1_reg_690_pp0_iter22_reg <= add_ln831_1_reg_690_pp0_iter21_reg;
                add_ln831_1_reg_690_pp0_iter23_reg <= add_ln831_1_reg_690_pp0_iter22_reg;
                add_ln831_1_reg_690_pp0_iter24_reg <= add_ln831_1_reg_690_pp0_iter23_reg;
                add_ln831_1_reg_690_pp0_iter25_reg <= add_ln831_1_reg_690_pp0_iter24_reg;
                add_ln831_1_reg_690_pp0_iter26_reg <= add_ln831_1_reg_690_pp0_iter25_reg;
                add_ln831_1_reg_690_pp0_iter27_reg <= add_ln831_1_reg_690_pp0_iter26_reg;
                add_ln831_1_reg_690_pp0_iter28_reg <= add_ln831_1_reg_690_pp0_iter27_reg;
                add_ln831_1_reg_690_pp0_iter29_reg <= add_ln831_1_reg_690_pp0_iter28_reg;
                add_ln831_1_reg_690_pp0_iter2_reg <= add_ln831_1_reg_690_pp0_iter1_reg;
                add_ln831_1_reg_690_pp0_iter30_reg <= add_ln831_1_reg_690_pp0_iter29_reg;
                add_ln831_1_reg_690_pp0_iter31_reg <= add_ln831_1_reg_690_pp0_iter30_reg;
                add_ln831_1_reg_690_pp0_iter32_reg <= add_ln831_1_reg_690_pp0_iter31_reg;
                add_ln831_1_reg_690_pp0_iter33_reg <= add_ln831_1_reg_690_pp0_iter32_reg;
                add_ln831_1_reg_690_pp0_iter34_reg <= add_ln831_1_reg_690_pp0_iter33_reg;
                add_ln831_1_reg_690_pp0_iter35_reg <= add_ln831_1_reg_690_pp0_iter34_reg;
                add_ln831_1_reg_690_pp0_iter36_reg <= add_ln831_1_reg_690_pp0_iter35_reg;
                add_ln831_1_reg_690_pp0_iter3_reg <= add_ln831_1_reg_690_pp0_iter2_reg;
                add_ln831_1_reg_690_pp0_iter4_reg <= add_ln831_1_reg_690_pp0_iter3_reg;
                add_ln831_1_reg_690_pp0_iter5_reg <= add_ln831_1_reg_690_pp0_iter4_reg;
                add_ln831_1_reg_690_pp0_iter6_reg <= add_ln831_1_reg_690_pp0_iter5_reg;
                add_ln831_1_reg_690_pp0_iter7_reg <= add_ln831_1_reg_690_pp0_iter6_reg;
                add_ln831_1_reg_690_pp0_iter8_reg <= add_ln831_1_reg_690_pp0_iter7_reg;
                add_ln831_1_reg_690_pp0_iter9_reg <= add_ln831_1_reg_690_pp0_iter8_reg;
                icmp_ln828_reg_681_pp0_iter10_reg <= icmp_ln828_reg_681_pp0_iter9_reg;
                icmp_ln828_reg_681_pp0_iter11_reg <= icmp_ln828_reg_681_pp0_iter10_reg;
                icmp_ln828_reg_681_pp0_iter12_reg <= icmp_ln828_reg_681_pp0_iter11_reg;
                icmp_ln828_reg_681_pp0_iter13_reg <= icmp_ln828_reg_681_pp0_iter12_reg;
                icmp_ln828_reg_681_pp0_iter14_reg <= icmp_ln828_reg_681_pp0_iter13_reg;
                icmp_ln828_reg_681_pp0_iter15_reg <= icmp_ln828_reg_681_pp0_iter14_reg;
                icmp_ln828_reg_681_pp0_iter16_reg <= icmp_ln828_reg_681_pp0_iter15_reg;
                icmp_ln828_reg_681_pp0_iter17_reg <= icmp_ln828_reg_681_pp0_iter16_reg;
                icmp_ln828_reg_681_pp0_iter18_reg <= icmp_ln828_reg_681_pp0_iter17_reg;
                icmp_ln828_reg_681_pp0_iter19_reg <= icmp_ln828_reg_681_pp0_iter18_reg;
                icmp_ln828_reg_681_pp0_iter1_reg <= icmp_ln828_reg_681;
                icmp_ln828_reg_681_pp0_iter20_reg <= icmp_ln828_reg_681_pp0_iter19_reg;
                icmp_ln828_reg_681_pp0_iter21_reg <= icmp_ln828_reg_681_pp0_iter20_reg;
                icmp_ln828_reg_681_pp0_iter22_reg <= icmp_ln828_reg_681_pp0_iter21_reg;
                icmp_ln828_reg_681_pp0_iter23_reg <= icmp_ln828_reg_681_pp0_iter22_reg;
                icmp_ln828_reg_681_pp0_iter24_reg <= icmp_ln828_reg_681_pp0_iter23_reg;
                icmp_ln828_reg_681_pp0_iter25_reg <= icmp_ln828_reg_681_pp0_iter24_reg;
                icmp_ln828_reg_681_pp0_iter26_reg <= icmp_ln828_reg_681_pp0_iter25_reg;
                icmp_ln828_reg_681_pp0_iter27_reg <= icmp_ln828_reg_681_pp0_iter26_reg;
                icmp_ln828_reg_681_pp0_iter28_reg <= icmp_ln828_reg_681_pp0_iter27_reg;
                icmp_ln828_reg_681_pp0_iter29_reg <= icmp_ln828_reg_681_pp0_iter28_reg;
                icmp_ln828_reg_681_pp0_iter2_reg <= icmp_ln828_reg_681_pp0_iter1_reg;
                icmp_ln828_reg_681_pp0_iter30_reg <= icmp_ln828_reg_681_pp0_iter29_reg;
                icmp_ln828_reg_681_pp0_iter31_reg <= icmp_ln828_reg_681_pp0_iter30_reg;
                icmp_ln828_reg_681_pp0_iter32_reg <= icmp_ln828_reg_681_pp0_iter31_reg;
                icmp_ln828_reg_681_pp0_iter33_reg <= icmp_ln828_reg_681_pp0_iter32_reg;
                icmp_ln828_reg_681_pp0_iter34_reg <= icmp_ln828_reg_681_pp0_iter33_reg;
                icmp_ln828_reg_681_pp0_iter35_reg <= icmp_ln828_reg_681_pp0_iter34_reg;
                icmp_ln828_reg_681_pp0_iter36_reg <= icmp_ln828_reg_681_pp0_iter35_reg;
                icmp_ln828_reg_681_pp0_iter37_reg <= icmp_ln828_reg_681_pp0_iter36_reg;
                icmp_ln828_reg_681_pp0_iter3_reg <= icmp_ln828_reg_681_pp0_iter2_reg;
                icmp_ln828_reg_681_pp0_iter4_reg <= icmp_ln828_reg_681_pp0_iter3_reg;
                icmp_ln828_reg_681_pp0_iter5_reg <= icmp_ln828_reg_681_pp0_iter4_reg;
                icmp_ln828_reg_681_pp0_iter6_reg <= icmp_ln828_reg_681_pp0_iter5_reg;
                icmp_ln828_reg_681_pp0_iter7_reg <= icmp_ln828_reg_681_pp0_iter6_reg;
                icmp_ln828_reg_681_pp0_iter8_reg <= icmp_ln828_reg_681_pp0_iter7_reg;
                icmp_ln828_reg_681_pp0_iter9_reg <= icmp_ln828_reg_681_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter10_empty_63_reg_231 <= ap_phi_reg_pp0_iter9_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter11_empty_63_reg_231 <= ap_phi_reg_pp0_iter10_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter12_empty_63_reg_231 <= ap_phi_reg_pp0_iter11_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter13_empty_63_reg_231 <= ap_phi_reg_pp0_iter12_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter14_empty_63_reg_231 <= ap_phi_reg_pp0_iter13_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter15_empty_63_reg_231 <= ap_phi_reg_pp0_iter14_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter16_empty_63_reg_231 <= ap_phi_reg_pp0_iter15_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter17_empty_63_reg_231 <= ap_phi_reg_pp0_iter16_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter18_empty_63_reg_231 <= ap_phi_reg_pp0_iter17_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter19_empty_63_reg_231 <= ap_phi_reg_pp0_iter18_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_empty_63_reg_231 <= ap_phi_reg_pp0_iter0_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter20_empty_63_reg_231 <= ap_phi_reg_pp0_iter19_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter21_empty_63_reg_231 <= ap_phi_reg_pp0_iter20_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter22_empty_63_reg_231 <= ap_phi_reg_pp0_iter21_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter23_empty_63_reg_231 <= ap_phi_reg_pp0_iter22_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter24_empty_63_reg_231 <= ap_phi_reg_pp0_iter23_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter25_empty_63_reg_231 <= ap_phi_reg_pp0_iter24_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter26_empty_63_reg_231 <= ap_phi_reg_pp0_iter25_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter27_empty_63_reg_231 <= ap_phi_reg_pp0_iter26_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_empty_63_reg_231 <= ap_phi_reg_pp0_iter27_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_empty_63_reg_231 <= ap_phi_reg_pp0_iter28_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_empty_63_reg_231 <= ap_phi_reg_pp0_iter1_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_empty_63_reg_231 <= ap_phi_reg_pp0_iter29_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter31_empty_63_reg_231 <= ap_phi_reg_pp0_iter30_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter32_empty_63_reg_231 <= ap_phi_reg_pp0_iter31_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter33_empty_63_reg_231 <= ap_phi_reg_pp0_iter32_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter34_empty_63_reg_231 <= ap_phi_reg_pp0_iter33_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter35_empty_63_reg_231 <= ap_phi_reg_pp0_iter34_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter36_empty_63_reg_231 <= ap_phi_reg_pp0_iter35_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_empty_63_reg_231 <= ap_phi_reg_pp0_iter2_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_empty_63_reg_231 <= ap_phi_reg_pp0_iter3_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_empty_63_reg_231 <= ap_phi_reg_pp0_iter4_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_empty_63_reg_231 <= ap_phi_reg_pp0_iter5_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_empty_63_reg_231 <= ap_phi_reg_pp0_iter6_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_empty_63_reg_231 <= ap_phi_reg_pp0_iter7_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_empty_63_reg_231 <= ap_phi_reg_pp0_iter8_empty_63_reg_231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln828_reg_681_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                childNode_box_maxX_reg_732 <= lshr_ln831_fu_421_p2(159 downto 128);
                childNode_box_maxY_reg_744 <= lshr_ln831_fu_421_p2(223 downto 192);
                childNode_box_minX_reg_726 <= lshr_ln831_fu_421_p2(127 downto 96);
                childNode_box_minY_reg_738 <= lshr_ln831_fu_421_p2(191 downto 160);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op204_read_state74 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then
                gmem_addr_read_reg_716 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln825_reg_672 <= icmp_ln825_fu_295_p2;
                icmp_ln825_reg_672_pp0_iter10_reg <= icmp_ln825_reg_672_pp0_iter9_reg;
                icmp_ln825_reg_672_pp0_iter11_reg <= icmp_ln825_reg_672_pp0_iter10_reg;
                icmp_ln825_reg_672_pp0_iter12_reg <= icmp_ln825_reg_672_pp0_iter11_reg;
                icmp_ln825_reg_672_pp0_iter13_reg <= icmp_ln825_reg_672_pp0_iter12_reg;
                icmp_ln825_reg_672_pp0_iter14_reg <= icmp_ln825_reg_672_pp0_iter13_reg;
                icmp_ln825_reg_672_pp0_iter15_reg <= icmp_ln825_reg_672_pp0_iter14_reg;
                icmp_ln825_reg_672_pp0_iter16_reg <= icmp_ln825_reg_672_pp0_iter15_reg;
                icmp_ln825_reg_672_pp0_iter17_reg <= icmp_ln825_reg_672_pp0_iter16_reg;
                icmp_ln825_reg_672_pp0_iter18_reg <= icmp_ln825_reg_672_pp0_iter17_reg;
                icmp_ln825_reg_672_pp0_iter19_reg <= icmp_ln825_reg_672_pp0_iter18_reg;
                icmp_ln825_reg_672_pp0_iter1_reg <= icmp_ln825_reg_672;
                icmp_ln825_reg_672_pp0_iter20_reg <= icmp_ln825_reg_672_pp0_iter19_reg;
                icmp_ln825_reg_672_pp0_iter21_reg <= icmp_ln825_reg_672_pp0_iter20_reg;
                icmp_ln825_reg_672_pp0_iter22_reg <= icmp_ln825_reg_672_pp0_iter21_reg;
                icmp_ln825_reg_672_pp0_iter23_reg <= icmp_ln825_reg_672_pp0_iter22_reg;
                icmp_ln825_reg_672_pp0_iter24_reg <= icmp_ln825_reg_672_pp0_iter23_reg;
                icmp_ln825_reg_672_pp0_iter25_reg <= icmp_ln825_reg_672_pp0_iter24_reg;
                icmp_ln825_reg_672_pp0_iter26_reg <= icmp_ln825_reg_672_pp0_iter25_reg;
                icmp_ln825_reg_672_pp0_iter27_reg <= icmp_ln825_reg_672_pp0_iter26_reg;
                icmp_ln825_reg_672_pp0_iter28_reg <= icmp_ln825_reg_672_pp0_iter27_reg;
                icmp_ln825_reg_672_pp0_iter29_reg <= icmp_ln825_reg_672_pp0_iter28_reg;
                icmp_ln825_reg_672_pp0_iter2_reg <= icmp_ln825_reg_672_pp0_iter1_reg;
                icmp_ln825_reg_672_pp0_iter30_reg <= icmp_ln825_reg_672_pp0_iter29_reg;
                icmp_ln825_reg_672_pp0_iter31_reg <= icmp_ln825_reg_672_pp0_iter30_reg;
                icmp_ln825_reg_672_pp0_iter32_reg <= icmp_ln825_reg_672_pp0_iter31_reg;
                icmp_ln825_reg_672_pp0_iter33_reg <= icmp_ln825_reg_672_pp0_iter32_reg;
                icmp_ln825_reg_672_pp0_iter34_reg <= icmp_ln825_reg_672_pp0_iter33_reg;
                icmp_ln825_reg_672_pp0_iter35_reg <= icmp_ln825_reg_672_pp0_iter34_reg;
                icmp_ln825_reg_672_pp0_iter36_reg <= icmp_ln825_reg_672_pp0_iter35_reg;
                icmp_ln825_reg_672_pp0_iter3_reg <= icmp_ln825_reg_672_pp0_iter2_reg;
                icmp_ln825_reg_672_pp0_iter4_reg <= icmp_ln825_reg_672_pp0_iter3_reg;
                icmp_ln825_reg_672_pp0_iter5_reg <= icmp_ln825_reg_672_pp0_iter4_reg;
                icmp_ln825_reg_672_pp0_iter6_reg <= icmp_ln825_reg_672_pp0_iter5_reg;
                icmp_ln825_reg_672_pp0_iter7_reg <= icmp_ln825_reg_672_pp0_iter6_reg;
                icmp_ln825_reg_672_pp0_iter8_reg <= icmp_ln825_reg_672_pp0_iter7_reg;
                icmp_ln825_reg_672_pp0_iter9_reg <= icmp_ln825_reg_672_pp0_iter8_reg;
                icmp_ln831_reg_696_pp0_iter10_reg <= icmp_ln831_reg_696_pp0_iter9_reg;
                icmp_ln831_reg_696_pp0_iter11_reg <= icmp_ln831_reg_696_pp0_iter10_reg;
                icmp_ln831_reg_696_pp0_iter12_reg <= icmp_ln831_reg_696_pp0_iter11_reg;
                icmp_ln831_reg_696_pp0_iter13_reg <= icmp_ln831_reg_696_pp0_iter12_reg;
                icmp_ln831_reg_696_pp0_iter14_reg <= icmp_ln831_reg_696_pp0_iter13_reg;
                icmp_ln831_reg_696_pp0_iter15_reg <= icmp_ln831_reg_696_pp0_iter14_reg;
                icmp_ln831_reg_696_pp0_iter16_reg <= icmp_ln831_reg_696_pp0_iter15_reg;
                icmp_ln831_reg_696_pp0_iter17_reg <= icmp_ln831_reg_696_pp0_iter16_reg;
                icmp_ln831_reg_696_pp0_iter18_reg <= icmp_ln831_reg_696_pp0_iter17_reg;
                icmp_ln831_reg_696_pp0_iter19_reg <= icmp_ln831_reg_696_pp0_iter18_reg;
                icmp_ln831_reg_696_pp0_iter20_reg <= icmp_ln831_reg_696_pp0_iter19_reg;
                icmp_ln831_reg_696_pp0_iter21_reg <= icmp_ln831_reg_696_pp0_iter20_reg;
                icmp_ln831_reg_696_pp0_iter22_reg <= icmp_ln831_reg_696_pp0_iter21_reg;
                icmp_ln831_reg_696_pp0_iter23_reg <= icmp_ln831_reg_696_pp0_iter22_reg;
                icmp_ln831_reg_696_pp0_iter24_reg <= icmp_ln831_reg_696_pp0_iter23_reg;
                icmp_ln831_reg_696_pp0_iter25_reg <= icmp_ln831_reg_696_pp0_iter24_reg;
                icmp_ln831_reg_696_pp0_iter26_reg <= icmp_ln831_reg_696_pp0_iter25_reg;
                icmp_ln831_reg_696_pp0_iter27_reg <= icmp_ln831_reg_696_pp0_iter26_reg;
                icmp_ln831_reg_696_pp0_iter28_reg <= icmp_ln831_reg_696_pp0_iter27_reg;
                icmp_ln831_reg_696_pp0_iter29_reg <= icmp_ln831_reg_696_pp0_iter28_reg;
                icmp_ln831_reg_696_pp0_iter2_reg <= icmp_ln831_reg_696;
                icmp_ln831_reg_696_pp0_iter30_reg <= icmp_ln831_reg_696_pp0_iter29_reg;
                icmp_ln831_reg_696_pp0_iter31_reg <= icmp_ln831_reg_696_pp0_iter30_reg;
                icmp_ln831_reg_696_pp0_iter32_reg <= icmp_ln831_reg_696_pp0_iter31_reg;
                icmp_ln831_reg_696_pp0_iter33_reg <= icmp_ln831_reg_696_pp0_iter32_reg;
                icmp_ln831_reg_696_pp0_iter34_reg <= icmp_ln831_reg_696_pp0_iter33_reg;
                icmp_ln831_reg_696_pp0_iter35_reg <= icmp_ln831_reg_696_pp0_iter34_reg;
                icmp_ln831_reg_696_pp0_iter36_reg <= icmp_ln831_reg_696_pp0_iter35_reg;
                icmp_ln831_reg_696_pp0_iter3_reg <= icmp_ln831_reg_696_pp0_iter2_reg;
                icmp_ln831_reg_696_pp0_iter4_reg <= icmp_ln831_reg_696_pp0_iter3_reg;
                icmp_ln831_reg_696_pp0_iter5_reg <= icmp_ln831_reg_696_pp0_iter4_reg;
                icmp_ln831_reg_696_pp0_iter6_reg <= icmp_ln831_reg_696_pp0_iter5_reg;
                icmp_ln831_reg_696_pp0_iter7_reg <= icmp_ln831_reg_696_pp0_iter6_reg;
                icmp_ln831_reg_696_pp0_iter8_reg <= icmp_ln831_reg_696_pp0_iter7_reg;
                icmp_ln831_reg_696_pp0_iter9_reg <= icmp_ln831_reg_696_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln825_reg_672 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln828_reg_681 <= icmp_ln828_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln828_reg_681 = ap_const_lv1_0) and (icmp_ln825_reg_672 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln831_reg_696 <= icmp_ln831_fu_370_p2;
                    select_ln831_reg_705(1 downto 0) <= select_ln831_fu_385_p3(1 downto 0);
                trunc_ln_reg_700 <= add_ln831_fu_365_p2(63 downto 6);
            end if;
        end if;
    end process;
    sub_ln831_reg_685(2 downto 0) <= "000";
    select_ln831_reg_705(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter37_stage0, ap_idle_pp0_0to36, ap_idle_pp0_1to38, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter37_stage0) and (ap_idle_pp0_0to36 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to38 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln825_fu_301_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    add_ln831_1_fu_357_p2 <= std_logic_vector(unsigned(trunc_ln831_fu_353_p1) + unsigned(trunc_ln12));
    add_ln831_fu_365_p2 <= std_logic_vector(signed(sext_ln831_3_fu_362_p1) + signed(HBM_PTR));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter37, m_axi_gmem_RVALID, ap_predicate_op205_read_state75)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op205_read_state75 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter37, m_axi_gmem_RVALID, ap_predicate_op205_read_state75)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op205_read_state75 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter37, m_axi_gmem_RVALID, ap_predicate_op205_read_state75)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op205_read_state75 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter36, m_axi_gmem_RVALID, ap_block_state4_io, ap_predicate_op204_read_state74)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_predicate_op204_read_state74 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter36, m_axi_gmem_RVALID, ap_block_state4_io, ap_predicate_op204_read_state74)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_predicate_op204_read_state74 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, ap_predicate_op134_readreq_state4)
    begin
                ap_block_state4_io <= ((ap_predicate_op134_readreq_state4 = ap_const_boolean_1) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage1_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage1_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage1_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage1_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage1_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state74_pp0_stage1_iter36_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op204_read_state74)
    begin
                ap_block_state74_pp0_stage1_iter36 <= ((ap_predicate_op204_read_state74 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state75_pp0_stage0_iter37_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op205_read_state75)
    begin
                ap_block_state75_pp0_stage0_iter37 <= ((ap_predicate_op205_read_state75 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state76_pp0_stage1_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln825_reg_672, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln825_reg_672 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter37_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter37, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter37_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter37_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter37_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to36_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to36 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to38_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to38 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to38 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_empty_63_reg_231 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op134_readreq_state4_assign_proc : process(icmp_ln825_reg_672_pp0_iter1_reg, icmp_ln828_reg_681)
    begin
                ap_predicate_op134_readreq_state4 <= ((icmp_ln828_reg_681 = ap_const_lv1_0) and (icmp_ln825_reg_672_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op204_read_state74_assign_proc : process(icmp_ln825_reg_672_pp0_iter36_reg, icmp_ln828_reg_681_pp0_iter35_reg)
    begin
                ap_predicate_op204_read_state74 <= ((icmp_ln828_reg_681_pp0_iter35_reg = ap_const_lv1_0) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op205_read_state75_assign_proc : process(icmp_ln825_reg_672_pp0_iter36_reg, icmp_ln828_reg_681_pp0_iter36_reg, icmp_ln831_reg_696_pp0_iter36_reg)
    begin
                ap_predicate_op205_read_state75 <= ((icmp_ln831_reg_696_pp0_iter36_reg = ap_const_lv1_1) and (icmp_ln828_reg_681_pp0_iter36_reg = ap_const_lv1_0) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_120, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_120;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmem_ARREADY, ap_predicate_op134_readreq_state4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op134_readreq_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, icmp_ln825_reg_672_pp0_iter36_reg, ap_predicate_op204_read_state74, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln828_reg_681_pp0_iter36_reg, icmp_ln831_reg_696_pp0_iter36_reg)
    begin
        if ((((icmp_ln831_reg_696_pp0_iter36_reg = ap_const_lv1_1) and (icmp_ln828_reg_681_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op204_read_state74 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    hasValidChild_out <= hasValidChild_fu_124;

    hasValidChild_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hasValidChild_out_ap_vld <= ap_const_logic_1;
        else 
            hasValidChild_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_15_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    icmp_ln200_2_fu_503_p2 <= "1" when (signed(childNode_box_minY_reg_738) < signed(minY_fu_148)) else "0";
    icmp_ln200_fu_479_p2 <= "1" when (signed(childNode_box_minX_reg_726) < signed(minX_fu_156)) else "0";
    icmp_ln224_2_fu_515_p2 <= "1" when (signed(maxY_fu_144) < signed(childNode_box_maxY_reg_744)) else "0";
    icmp_ln224_fu_491_p2 <= "1" when (signed(maxX_fu_152) < signed(childNode_box_maxX_reg_732)) else "0";
    icmp_ln825_fu_295_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_6) else "0";
    icmp_ln828_fu_317_p2 <= "1" when (node_child_q0 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln831_fu_370_p2 <= "1" when (unsigned(add_ln831_1_reg_690) > unsigned(ap_const_lv6_8)) else "0";
    lshr_ln831_fu_421_p2 <= std_logic_vector(shift_right(unsigned(tmp_s_fu_403_p3),to_integer(unsigned('0' & zext_ln831_fu_417_p1(31-1 downto 0)))));
    m_axi_gmem_ARADDR <= sext_ln831_1_fu_393_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= select_ln831_reg_705;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op134_readreq_state4, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op134_readreq_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_CS_fsm_pp0_stage1, ap_predicate_op204_read_state74, ap_predicate_op205_read_state75, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op204_read_state74 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_predicate_op205_read_state75 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_2;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    maxX_4_fu_496_p3 <= 
        childNode_box_maxX_reg_732 when (icmp_ln224_fu_491_p2(0) = '1') else 
        maxX_fu_152;
    maxY_4_fu_520_p3 <= 
        childNode_box_maxY_reg_744 when (icmp_ln224_2_fu_515_p2(0) = '1') else 
        maxY_fu_144;
    minX_4_fu_484_p3 <= 
        childNode_box_minX_reg_726 when (icmp_ln200_fu_479_p2(0) = '1') else 
        minX_fu_156;
    minY_4_fu_508_p3 <= 
        childNode_box_minY_reg_738 when (icmp_ln200_2_fu_503_p2(0) = '1') else 
        minY_fu_148;
    node_child_address0 <= i_15_cast_fu_307_p1(3 - 1 downto 0);

    node_child_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_child_ce0 <= ap_const_logic_1;
        else 
            node_child_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_out <= maxY_3_fu_140;
    p_out1 <= minY_3_fu_136;

    p_out1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= maxX_3_fu_132;

    p_out2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= minX_3_fu_128;

    p_out3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln825_reg_672_pp0_iter36_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln825_reg_672_pp0_iter36_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln831_fu_385_p3 <= 
        ap_const_lv32_2 when (icmp_ln831_fu_370_p2(0) = '1') else 
        ap_const_lv32_1;
        sext_ln831_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_700),64));

        sext_ln831_2_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln831_2_fu_335_p3),39));

        sext_ln831_3_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln831_reg_685),64));

        sext_ln831_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln831_1_fu_323_p3),39));

    shl_ln831_1_fu_323_p3 <= (node_child_q0 & ap_const_lv6_0);
    shl_ln831_2_fu_335_p3 <= (node_child_q0 & ap_const_lv3_0);
    shl_ln_fu_410_p3 <= (add_ln831_1_reg_690_pp0_iter36_reg & ap_const_lv3_0);
    sub_ln831_fu_347_p2 <= std_logic_vector(signed(sext_ln831_fu_331_p1) - signed(sext_ln831_2_fu_343_p1));
    tmp_s_fu_403_p3 <= (ap_phi_reg_pp0_iter37_empty_63_reg_231 & gmem_addr_read_reg_716);
    trunc_ln831_fu_353_p1 <= sub_ln831_fu_347_p2(6 - 1 downto 0);
    zext_ln831_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_410_p3),1024));
end behav;
