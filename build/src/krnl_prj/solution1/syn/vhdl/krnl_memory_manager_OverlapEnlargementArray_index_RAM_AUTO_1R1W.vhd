-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_memory_manager_OverlapEnlargementArray_index_RAM_AUTO_1R1W is 
    generic(
        MEM_TYPE        : string    := "auto"; 
        DataWidth       : integer   := 32; 
        AddressWidth    : integer   := 7;
        AddressRange    : integer   := 100
    ); 
    port (
        address0    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce0         : in std_logic; 
        d0          : in std_logic_vector(DataWidth-1 downto 0); 
        we0         : in std_logic; 
        q0          : out std_logic_vector(DataWidth-1 downto 0);
        address1    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce1         : in std_logic; 
        d1          : in std_logic_vector(DataWidth-1 downto 0); 
        we1         : in std_logic; 
        q1          : out std_logic_vector(DataWidth-1 downto 0);
        reset           : in std_logic; 
        clk             : in std_logic 
    ); 
end entity; 

architecture rtl of krnl_memory_manager_OverlapEnlargementArray_index_RAM_AUTO_1R1W is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0);


type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
-- Init 
shared variable ram : mem_array := (
    0 => "11111111111111111111111111111111", 1 => "11111111111111111111111111111111", 2 => "11111111111111111111111111111111", 3 => "11111111111111111111111111111111", 
    4 => "11111111111111111111111111111111", 5 => "11111111111111111111111111111111", 6 => "11111111111111111111111111111111", 7 => "11111111111111111111111111111111", 
    8 => "11111111111111111111111111111111", 9 => "11111111111111111111111111111111", 10 => "11111111111111111111111111111111", 11 => "11111111111111111111111111111111", 
    12 => "11111111111111111111111111111111", 13 => "11111111111111111111111111111111", 14 => "11111111111111111111111111111111", 15 => "11111111111111111111111111111111", 
    16 => "11111111111111111111111111111111", 17 => "11111111111111111111111111111111", 18 => "11111111111111111111111111111111", 19 => "11111111111111111111111111111111", 
    20 => "11111111111111111111111111111111", 21 => "11111111111111111111111111111111", 22 => "11111111111111111111111111111111", 23 => "11111111111111111111111111111111", 
    24 => "11111111111111111111111111111111", 25 => "11111111111111111111111111111111", 26 => "11111111111111111111111111111111", 27 => "11111111111111111111111111111111", 
    28 => "11111111111111111111111111111111", 29 => "11111111111111111111111111111111", 30 => "11111111111111111111111111111111", 31 => "11111111111111111111111111111111", 
    32 => "11111111111111111111111111111111", 33 => "11111111111111111111111111111111", 34 => "11111111111111111111111111111111", 35 => "11111111111111111111111111111111", 
    36 => "11111111111111111111111111111111", 37 => "11111111111111111111111111111111", 38 => "11111111111111111111111111111111", 39 => "11111111111111111111111111111111", 
    40 => "11111111111111111111111111111111", 41 => "11111111111111111111111111111111", 42 => "11111111111111111111111111111111", 43 => "11111111111111111111111111111111", 
    44 => "11111111111111111111111111111111", 45 => "11111111111111111111111111111111", 46 => "11111111111111111111111111111111", 47 => "11111111111111111111111111111111", 
    48 => "11111111111111111111111111111111", 49 => "11111111111111111111111111111111", 50 => "11111111111111111111111111111111", 51 => "11111111111111111111111111111111", 
    52 => "11111111111111111111111111111111", 53 => "11111111111111111111111111111111", 54 => "11111111111111111111111111111111", 55 => "11111111111111111111111111111111", 
    56 => "11111111111111111111111111111111", 57 => "11111111111111111111111111111111", 58 => "11111111111111111111111111111111", 59 => "11111111111111111111111111111111", 
    60 => "11111111111111111111111111111111", 61 => "11111111111111111111111111111111", 62 => "11111111111111111111111111111111", 63 => "11111111111111111111111111111111", 
    64 => "11111111111111111111111111111111", 65 => "11111111111111111111111111111111", 66 => "11111111111111111111111111111111", 67 => "11111111111111111111111111111111", 
    68 => "11111111111111111111111111111111", 69 => "11111111111111111111111111111111", 70 => "11111111111111111111111111111111", 71 => "11111111111111111111111111111111", 
    72 => "11111111111111111111111111111111", 73 => "11111111111111111111111111111111", 74 => "11111111111111111111111111111111", 75 => "11111111111111111111111111111111", 
    76 => "11111111111111111111111111111111", 77 => "11111111111111111111111111111111", 78 => "11111111111111111111111111111111", 79 => "11111111111111111111111111111111", 
    80 => "11111111111111111111111111111111", 81 => "11111111111111111111111111111111", 82 => "11111111111111111111111111111111", 83 => "11111111111111111111111111111111", 
    84 => "11111111111111111111111111111111", 85 => "11111111111111111111111111111111", 86 => "11111111111111111111111111111111", 87 => "11111111111111111111111111111111", 
    88 => "11111111111111111111111111111111", 89 => "11111111111111111111111111111111", 90 => "11111111111111111111111111111111", 91 => "11111111111111111111111111111111", 
    92 => "11111111111111111111111111111111", 93 => "11111111111111111111111111111111", 94 => "11111111111111111111111111111111", 95 => "11111111111111111111111111111111", 
    96 => "11111111111111111111111111111111", 97 => "11111111111111111111111111111111", 98 => "11111111111111111111111111111111", 99 => "11111111111111111111111111111111"); -- 
attribute syn_ramstyle : string;
attribute syn_ramstyle of ram : variable is "auto";
attribute ram_style : string;
attribute ram_style of ram : variable is MEM_TYPE;

begin 


memory_access_guard_0: process (address0) 
begin
    address0_tmp <= address0;
--synthesis translate_off
    if (CONV_INTEGER(address0) > AddressRange-1) then
        address0_tmp <= (others => '0');
    else 
       address0_tmp <= address0;
    end if;
--synthesis translate_on
end process;   -- 




--  read first
p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= ram(CONV_INTEGER(address0_tmp));
            if (we0 = '1') then 
                ram(CONV_INTEGER(address0_tmp)) := d0; 
            end if; 
        end if;
    end if;
end process;


 
memory_access_guard_1: process (address1) 
begin
    address1_tmp <= address1;
--synthesis translate_off
    if (CONV_INTEGER(address1) > AddressRange-1) then
        address1_tmp <= (others => '0');
    else 
       address1_tmp <= address1;
    end if;
--synthesis translate_on
end process;   -- 




--  read first
p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            q1 <= ram(CONV_INTEGER(address1_tmp));
            if (we1 = '1') then 
                ram(CONV_INTEGER(address1_tmp)) := d1; 
            end if; 
        end if;
    end if;
end process;


 

end rtl;
